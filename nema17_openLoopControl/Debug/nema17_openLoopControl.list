
nema17_openLoopControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee8  08007ee8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef0  08007ef0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef0  08007ef0  00017ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  200000fc  08007ff4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  08007ff4  00021dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b52  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003345  00000000  00000000  00034cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef2  00000000  00000000  00039360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191ab  00000000  00000000  0003a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183cc  00000000  00000000  000533fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091a7b  00000000  00000000  0006b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051e8  00000000  00000000  000fd244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e70 	.word	0x08007e70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007e70 	.word	0x08007e70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 faac 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f814 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f91a 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f87a 	bl	80005dc <MX_I2C1_Init>
  MX_TIM4_Init();
 80004e8:	f000 f8a6 	bl	8000638 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 ffaa 	bl	8007444 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004f0:	2108      	movs	r1, #8
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <main+0x30>)
 80004f4:	f002 fe3a 	bl	800316c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80004f8:	2108      	movs	r1, #8
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <main+0x30>)
 80004fc:	f002 fee6 	bl	80032cc <HAL_TIM_PWM_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x2c>
 8000502:	bf00      	nop
 8000504:	2000016c 	.word	0x2000016c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f007 fc7e 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8000578:	2317      	movs	r3, #23
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 354;
 800057c:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000582:	2304      	movs	r3, #4
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000586:	2308      	movs	r3, #8
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f958 	bl	8002844 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f91d 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2103      	movs	r1, #3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fbba 	bl	8002d34 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f907 	bl	80007d8 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f000 fd51 	bl	80010c0 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f8d8 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000118 	.word	0x20000118
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_TIM4_Init+0xd8>)
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <MX_TIM4_Init+0xdc>)
 8000666:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <MX_TIM4_Init+0xd8>)
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_TIM4_Init+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 52280-1;
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_TIM4_Init+0xd8>)
 8000676:	f64c 4237 	movw	r2, #52279	; 0xcc37
 800067a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_TIM4_Init+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_TIM4_Init+0xd8>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <MX_TIM4_Init+0xd8>)
 800068a:	f002 fd1f 	bl	80030cc <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f8a0 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	4619      	mov	r1, r3
 80006a4:	481a      	ldr	r0, [pc, #104]	; (8000710 <MX_TIM4_Init+0xd8>)
 80006a6:	f002 ff6a 	bl	800357e <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80006b0:	f000 f892 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <MX_TIM4_Init+0xd8>)
 80006b6:	f002 fe6d 	bl	8003394 <HAL_TIM_IC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80006c0:	f000 f88a 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <MX_TIM4_Init+0xd8>)
 80006d4:	f003 fa78 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80006de:	f000 f87b 	bl	80007d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2208      	movs	r2, #8
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_TIM4_Init+0xd8>)
 80006fa:	f002 fea4 	bl	8003446 <HAL_TIM_IC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000704:	f000 f868 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000016c 	.word	0x2000016c
 8000714:	40000800 	.word	0x40000800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN__Pin|CW__Pin|CLK__Pin|DIR_Pin
 8000782:	2200      	movs	r2, #0
 8000784:	f240 4136 	movw	r1, #1078	; 0x436
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800078a:	f000 fc7f 	bl	800108c <HAL_GPIO_WritePin>
                          |PGO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN__Pin CW__Pin DIR_Pin PGO_Pin */
  GPIO_InitStruct.Pin = EN__Pin|CW__Pin|DIR_Pin|PGO_Pin;
 800078e:	2336      	movs	r3, #54	; 0x36
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000796:	2302      	movs	r3, #2
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xbc>)
 80007a6:	f000 faed 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK__Pin */
  GPIO_InitStruct.Pin = CLK__Pin;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CLK__GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xbc>)
 80007c4:	f000 fade 	bl	8000d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_I2C_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_I2C_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_I2C_MspInit+0x88>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_I2C_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000872:	23c0      	movs	r3, #192	; 0xc0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000882:	2304      	movs	r3, #4
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <HAL_I2C_MspInit+0x8c>)
 800088e:	f000 fa79 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_I2C_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_I2C_MspInit+0x88>)
 800089c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_I2C_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_TIM_Base_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12c      	bne.n	8000940 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_TIM_Base_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 800091e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000930:	2302      	movs	r3, #2
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_TIM_Base_MspInit+0x8c>)
 800093c:	f000 fa22 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40000800 	.word	0x40000800
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f89a 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <OTG_FS_IRQHandler+0x10>)
 80009ae:	f000 fe1b 	bl	80015e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20001698 	.word	0x20001698

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f007 fa0b 	bl	8007e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd5f 	bl	80004d4 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a24:	08007ef8 	.word	0x08007ef8
  ldr r2, =_sbss
 8000a28:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a2c:	20001dc4 	.word	0x20001dc4

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f94f 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff febc 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f967 	bl	8000d6a <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f92f 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200001b4 	.word	0x200001b4

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200001b4 	.word	0x200001b4

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff3e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff31 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e159      	b.n	8001054 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8148 	bne.w	800104e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80a2 	beq.w	800104e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a56      	ldr	r2, [pc, #344]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x202>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2f4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1fe>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a47      	ldr	r2, [pc, #284]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a46      	ldr	r2, [pc, #280]	; (8001080 <HAL_GPIO_Init+0x2fc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_GPIO_Init+0x300>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1f2>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_GPIO_Init+0x304>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f aea2 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e12b      	b.n	800132a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fba4 	bl	8000834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2224      	movs	r2, #36	; 0x24
 80010f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001124:	f001 ffbe 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8001128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a81      	ldr	r2, [pc, #516]	; (8001334 <HAL_I2C_Init+0x274>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d807      	bhi.n	8001144 <HAL_I2C_Init+0x84>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a80      	ldr	r2, [pc, #512]	; (8001338 <HAL_I2C_Init+0x278>)
 8001138:	4293      	cmp	r3, r2
 800113a:	bf94      	ite	ls
 800113c:	2301      	movls	r3, #1
 800113e:	2300      	movhi	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	e006      	b.n	8001152 <HAL_I2C_Init+0x92>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a7d      	ldr	r2, [pc, #500]	; (800133c <HAL_I2C_Init+0x27c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	bf94      	ite	ls
 800114c:	2301      	movls	r3, #1
 800114e:	2300      	movhi	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0e7      	b.n	800132a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4a78      	ldr	r2, [pc, #480]	; (8001340 <HAL_I2C_Init+0x280>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a6a      	ldr	r2, [pc, #424]	; (8001334 <HAL_I2C_Init+0x274>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d802      	bhi.n	8001194 <HAL_I2C_Init+0xd4>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3301      	adds	r3, #1
 8001192:	e009      	b.n	80011a8 <HAL_I2C_Init+0xe8>
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_I2C_Init+0x284>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	3301      	adds	r3, #1
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	495c      	ldr	r1, [pc, #368]	; (8001334 <HAL_I2C_Init+0x274>)
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d819      	bhi.n	80011fc <HAL_I2C_Init+0x13c>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1e59      	subs	r1, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d6:	1c59      	adds	r1, r3, #1
 80011d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011dc:	400b      	ands	r3, r1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00a      	beq.n	80011f8 <HAL_I2C_Init+0x138>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1e59      	subs	r1, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f6:	e051      	b.n	800129c <HAL_I2C_Init+0x1dc>
 80011f8:	2304      	movs	r3, #4
 80011fa:	e04f      	b.n	800129c <HAL_I2C_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_I2C_Init+0x168>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1e58      	subs	r0, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6859      	ldr	r1, [r3, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	e012      	b.n	800124e <HAL_I2C_Init+0x18e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e58      	subs	r0, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	0099      	lsls	r1, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	3301      	adds	r3, #1
 8001240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2C_Init+0x196>
 8001252:	2301      	movs	r3, #1
 8001254:	e022      	b.n	800129c <HAL_I2C_Init+0x1dc>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10e      	bne.n	800127c <HAL_I2C_Init+0x1bc>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1e58      	subs	r0, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6859      	ldr	r1, [r3, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	440b      	add	r3, r1
 800126c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001270:	3301      	adds	r3, #1
 8001272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	e00f      	b.n	800129c <HAL_I2C_Init+0x1dc>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e58      	subs	r0, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	0099      	lsls	r1, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	6809      	ldr	r1, [r1, #0]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69da      	ldr	r2, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6911      	ldr	r1, [r2, #16]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68d2      	ldr	r2, [r2, #12]
 80012d6:	4311      	orrs	r1, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	000186a0 	.word	0x000186a0
 8001338:	001e847f 	.word	0x001e847f
 800133c:	003d08ff 	.word	0x003d08ff
 8001340:	431bde83 	.word	0x431bde83
 8001344:	10624dd3 	.word	0x10624dd3

08001348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
 800134c:	af0a      	add	r7, sp, #40	; 0x28
 800134e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e10f      	b.n	800157a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f006 fa45 	bl	8007804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fd98 	bl	8003ece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	687e      	ldr	r6, [r7, #4]
 80013a6:	466d      	mov	r5, sp
 80013a8:	f106 0410 	add.w	r4, r6, #16
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013bc:	1d33      	adds	r3, r6, #4
 80013be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f002 fc6f 	bl	8003ca4 <USB_CoreInit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0d0      	b.n	800157a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fd86 	bl	8003ef0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e04a      	b.n	8001480 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	333d      	adds	r3, #61	; 0x3d
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	333c      	adds	r3, #60	; 0x3c
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	b298      	uxth	r0, r3
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3344      	adds	r3, #68	; 0x44
 8001426:	4602      	mov	r2, r0
 8001428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3340      	adds	r3, #64	; 0x40
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3348      	adds	r3, #72	; 0x48
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	334c      	adds	r3, #76	; 0x4c
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3354      	adds	r3, #84	; 0x54
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3301      	adds	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3af      	bcc.n	80013ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e044      	b.n	800151a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	3301      	adds	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d3b5      	bcc.n	8001490 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	687e      	ldr	r6, [r7, #4]
 800152c:	466d      	mov	r5, sp
 800152e:	f106 0410 	add.w	r4, r6, #16
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001542:	1d33      	adds	r3, r6, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f002 fd1e 	bl	8003f88 <USB_DevInit>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00d      	b.n	800157a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fe6d 	bl	8005252 <USB_DevDisconnect>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001582 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_PCD_Start+0x1c>
 800159a:	2302      	movs	r3, #2
 800159c:	e020      	b.n	80015e0 <HAL_PCD_Start+0x5e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d109      	bne.n	80015c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d005      	beq.n	80015c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fc70 	bl	8003eac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fe1d 	bl	8005210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b08d      	sub	sp, #52	; 0x34
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fedb 	bl	80053ba <USB_GetMode>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 848a 	bne.w	8001f20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fe3f 	bl	8005294 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8480 	beq.w	8001f1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fe2c 	bl	8005294 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d107      	bne.n	8001656 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f002 0202 	and.w	r2, r2, #2
 8001654:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fe1a 	bl	8005294 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b10      	cmp	r3, #16
 8001668:	d161      	bne.n	800172e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0210 	bic.w	r2, r2, #16
 8001678:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 020f 	and.w	r2, r3, #15
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	0c5b      	lsrs	r3, r3, #17
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d124      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d035      	beq.n	800171e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	6a38      	ldr	r0, [r7, #32]
 80016c6:	f003 fc51 	bl	8004f6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d6:	441a      	add	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e8:	441a      	add	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	621a      	str	r2, [r3, #32]
 80016ee:	e016      	b.n	800171e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d110      	bne.n	800171e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001702:	2208      	movs	r2, #8
 8001704:	4619      	mov	r1, r3
 8001706:	6a38      	ldr	r0, [r7, #32]
 8001708:	f003 fc30 	bl	8004f6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001718:	441a      	add	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0210 	orr.w	r2, r2, #16
 800172c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fdae 	bl	8005294 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001742:	f040 80a7 	bne.w	8001894 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fdb3 	bl	80052ba <USB_ReadDevAllOutEpInterrupt>
 8001754:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001756:	e099      	b.n	800188c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 808e 	beq.w	8001880 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fdd7 	bl	8005322 <USB_ReadDevOutEPInterrupt>
 8001774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178c:	461a      	mov	r2, r3
 800178e:	2301      	movs	r3, #1
 8001790:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fec3 	bl	8002520 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b0:	461a      	mov	r2, r3
 80017b2:	2308      	movs	r3, #8
 80017b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 ff99 	bl	80026f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d4:	461a      	mov	r2, r3
 80017d6:	2310      	movs	r3, #16
 80017d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d030      	beq.n	8001846 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d109      	bne.n	8001804 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	3304      	adds	r3, #4
 8001818:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	78db      	ldrb	r3, [r3, #3]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f006 f8e4 	bl	80079fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001840:	461a      	mov	r2, r3
 8001842:	2302      	movs	r3, #2
 8001844:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185c:	461a      	mov	r2, r3
 800185e:	2320      	movs	r3, #32
 8001860:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001878:	461a      	mov	r2, r3
 800187a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f af62 	bne.w	8001758 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fcfb 	bl	8005294 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018a8:	f040 80db 	bne.w	8001a62 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fd1c 	bl	80052ee <USB_ReadDevAllInEpInterrupt>
 80018b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018bc:	e0cd      	b.n	8001a5a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80c2 	beq.w	8001a4e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fd42 	bl	800535e <USB_ReadDevInEPInterrupt>
 80018da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d057      	beq.n	8001996 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	2201      	movs	r2, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69f9      	ldr	r1, [r7, #28]
 8001902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001906:	4013      	ands	r3, r2
 8001908:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001916:	461a      	mov	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d132      	bne.n	800198a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	334c      	adds	r3, #76	; 0x4c
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4419      	add	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4403      	add	r3, r0
 8001958:	334c      	adds	r3, #76	; 0x4c
 800195a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d113      	bne.n	800198a <HAL_PCD_IRQHandler+0x3a2>
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3354      	adds	r3, #84	; 0x54
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d108      	bne.n	800198a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001982:	461a      	mov	r2, r3
 8001984:	2101      	movs	r1, #1
 8001986:	f003 fd49 	bl	800541c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f005 ffb8 	bl	8007906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2308      	movs	r3, #8
 80019b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	2310      	movs	r3, #16
 80019cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e4:	461a      	mov	r2, r3
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f6:	6a38      	ldr	r0, [r7, #32]
 80019f8:	f002 fc2a 	bl	8004250 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3338      	adds	r3, #56	; 0x38
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f005 fffb 	bl	8007a20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a36:	461a      	mov	r2, r3
 8001a38:	2302      	movs	r3, #2
 8001a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fcdb 	bl	8002404 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f af2e 	bne.w	80018be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fc14 	bl	8005294 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a76:	d122      	bne.n	8001abe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fec3 	bl	800282c <HAL_PCDEx_LPM_Callback>
 8001aa6:	e002      	b.n	8001aae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 ff99 	bl	80079e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fbe6 	bl	8005294 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad2:	d112      	bne.n	8001afa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f005 ff55 	bl	8007994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001af8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fbc8 	bl	8005294 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0e:	f040 80b7 	bne.w	8001c80 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fb8f 	bl	8004250 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b36:	e046      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b44:	461a      	mov	r2, r3
 8001b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5c:	0151      	lsls	r1, r2, #5
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	440a      	add	r2, r1
 8001b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b90:	0151      	lsls	r1, r2, #5
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	440a      	add	r2, r1
 8001b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb0:	0151      	lsls	r1, r2, #5
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	440a      	add	r2, r1
 8001bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bbe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3b3      	bcc.n	8001b38 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bde:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001be2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d016      	beq.n	8001c1a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bfc:	f043 030b 	orr.w	r3, r3, #11
 8001c00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f043 030b 	orr.w	r3, r3, #11
 8001c16:	6453      	str	r3, [r2, #68]	; 0x44
 8001c18:	e015      	b.n	8001c46 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c40:	f043 030b 	orr.w	r3, r3, #11
 8001c44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f003 fbd6 	bl	800541c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fb05 	bl	8005294 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c94:	d124      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fb9b 	bl	80053d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fb50 	bl	800434a <USB_GetDevSpeed>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681c      	ldr	r4, [r3, #0]
 8001cb6:	f001 f9e9 	bl	800308c <HAL_RCC_GetHCLKFreq>
 8001cba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f002 f84f 	bl	8003d68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f005 fe43 	bl	8007956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fad5 	bl	8005294 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d10a      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f005 fe20 	bl	800793a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f002 0208 	and.w	r2, r2, #8
 8001d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fac0 	bl	8005294 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1a:	2b80      	cmp	r3, #128	; 0x80
 8001d1c:	d122      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	e014      	b.n	8001d5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fb27 	bl	80023a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3e5      	bcc.n	8001d30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fa93 	bl	8005294 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d78:	d13b      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e02b      	b.n	8001dd8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3340      	adds	r3, #64	; 0x40
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d115      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001da6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da12      	bge.n	8001dd2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	333f      	adds	r3, #63	; 0x3f
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fae8 	bl	80023a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3ce      	bcc.n	8001d80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fa4c 	bl	8005294 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e06:	d155      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e08:	2301      	movs	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	e045      	b.n	8001e9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d12e      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da2b      	bge.n	8001e94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d121      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10a      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6053      	str	r3, [r2, #4]
            break;
 8001e92:	e007      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3301      	adds	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3b4      	bcc.n	8001e0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f9eb 	bl	8005294 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f005 fdba 	bl	8007a44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f9d5 	bl	8005294 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d115      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f005 fdaa 	bl	8007a60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e000      	b.n	8001f20 <HAL_PCD_IRQHandler+0x938>
      return;
 8001f1e:	bf00      	nop
    }
  }
}
 8001f20:	3734      	adds	r7, #52	; 0x34
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}

08001f26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_SetAddress+0x1a>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e013      	b.n	8001f68 <HAL_PCD_SetAddress+0x42>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f933 	bl	80051c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	4608      	mov	r0, r1
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	70fb      	strb	r3, [r7, #3]
 8001f82:	460b      	mov	r3, r1
 8001f84:	803b      	strh	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0f      	bge.n	8001fb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3338      	adds	r3, #56	; 0x38
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	e00f      	b.n	8001fd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fe2:	883a      	ldrh	r2, [r7, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	78ba      	ldrb	r2, [r7, #2]
 8001fec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002000:	78bb      	ldrb	r3, [r7, #2]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d102      	bne.n	800200c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_EP_Open+0xaa>
 8002016:	2302      	movs	r3, #2
 8002018:	e00e      	b.n	8002038 <HAL_PCD_EP_Open+0xc8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	f002 f9b3 	bl	8004394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002036:	7afb      	ldrb	r3, [r7, #11]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0f      	bge.n	8002074 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3338      	adds	r3, #56	; 0x38
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00f      	b.n	8002094 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 020f 	and.w	r2, r3, #15
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_EP_Close+0x6e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e00e      	b.n	80020cc <HAL_PCD_EP_Close+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 f9f1 	bl	80044a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	f003 020f 	and.w	r2, r3, #15
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	6979      	ldr	r1, [r7, #20]
 8002148:	f002 fcd0 	bl	8004aec <USB_EP0StartXfer>
 800214c:	e008      	b.n	8002160 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	f002 fa7e 	bl	800465c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800218c:	681b      	ldr	r3, [r3, #0]
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	3338      	adds	r3, #56	; 0x38
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	6979      	ldr	r1, [r7, #20]
 800220c:	f002 fc6e 	bl	8004aec <USB_EP0StartXfer>
 8002210:	e008      	b.n	8002224 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	6979      	ldr	r1, [r7, #20]
 8002220:	f002 fa1c 	bl	800465c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d901      	bls.n	800224c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e050      	b.n	80022ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0f      	bge.n	8002274 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
 8002272:	e00d      	b.n	8002290 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PCD_EP_SetStall+0x82>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e01e      	b.n	80022ee <HAL_PCD_EP_SetStall+0xc0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 feac 	bl	800501c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	b2d9      	uxtb	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022de:	461a      	mov	r2, r3
 80022e0:	f003 f89c 	bl	800541c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d901      	bls.n	8002314 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e042      	b.n	800239a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da0f      	bge.n	800233c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 020f 	and.w	r2, r3, #15
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3338      	adds	r3, #56	; 0x38
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	705a      	strb	r2, [r3, #1]
 800233a:	e00f      	b.n	800235c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_PCD_EP_ClrStall+0x86>
 8002378:	2302      	movs	r3, #2
 800237a:	e00e      	b.n	800239a <HAL_PCD_EP_ClrStall+0xa4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 feb4 	bl	80050f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da0c      	bge.n	80023d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 020f 	and.w	r2, r3, #15
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	3338      	adds	r3, #56	; 0x38
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e00c      	b.n	80023ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fcd3 	bl	8004d9c <USB_EPStopXfer>
 80023f6:	4603      	mov	r3, r0
 80023f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023fa:	7afb      	ldrb	r3, [r7, #11]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af02      	add	r7, sp, #8
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	429a      	cmp	r2, r3
 8002436:	d901      	bls.n	800243c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e06c      	b.n	8002516 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	429a      	cmp	r2, r3
 8002450:	d902      	bls.n	8002458 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3303      	adds	r3, #3
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002460:	e02b      	b.n	80024ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	d902      	bls.n	800247e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3303      	adds	r3, #3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002496:	b2db      	uxtb	r3, r3
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4603      	mov	r3, r0
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f002 fd27 	bl	8004ef0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	441a      	add	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	441a      	add	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d809      	bhi.n	80024e4 <PCD_WriteEmptyTxFifo+0xe0>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024d8:	429a      	cmp	r2, r3
 80024da:	d203      	bcs.n	80024e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1be      	bne.n	8002462 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d811      	bhi.n	8002514 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	43db      	mvns	r3, r3
 800250a:	6939      	ldr	r1, [r7, #16]
 800250c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002510:	4013      	ands	r3, r2
 8002512:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	333c      	adds	r3, #60	; 0x3c
 8002538:	3304      	adds	r3, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d17b      	bne.n	800264e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a61      	ldr	r2, [pc, #388]	; (80026e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	f240 80b9 	bls.w	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80b3 	beq.w	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002582:	461a      	mov	r2, r3
 8002584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002588:	6093      	str	r3, [r2, #8]
 800258a:	e0a7      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	2320      	movs	r3, #32
 80025a6:	6093      	str	r3, [r2, #8]
 80025a8:	e098      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f040 8093 	bne.w	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d90f      	bls.n	80025de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	e07e      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	440b      	add	r3, r1
 8002600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	1ad2      	subs	r2, r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002628:	461a      	mov	r2, r3
 800262a:	2101      	movs	r1, #1
 800262c:	f002 fef6 	bl	800541c <USB_EP0_OutStart>
 8002630:	e006      	b.n	8002640 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f005 f942 	bl	80078d0 <HAL_PCD_DataOutStageCallback>
 800264c:	e046      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d124      	bne.n	80026a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	e032      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2320      	movs	r3, #32
 8002690:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f005 f919 	bl	80078d0 <HAL_PCD_DataOutStageCallback>
 800269e:	e01d      	b.n	80026dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026c8:	461a      	mov	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	f002 fea6 	bl	800541c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f005 f8fa 	bl	80078d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	4f54300a 	.word	0x4f54300a
 80026ec:	4f54310a 	.word	0x4f54310a

080026f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	333c      	adds	r3, #60	; 0x3c
 8002708:	3304      	adds	r3, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <PCD_EP_OutSetupPacket_int+0x88>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d90e      	bls.n	8002744 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273c:	461a      	mov	r2, r3
 800273e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002742:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f005 f8b1 	bl	80078ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <PCD_EP_OutSetupPacket_int+0x88>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d90c      	bls.n	800276c <PCD_EP_OutSetupPacket_int+0x7c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002764:	461a      	mov	r2, r3
 8002766:	2101      	movs	r1, #1
 8002768:	f002 fe58 	bl	800541c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	4f54300a 	.word	0x4f54300a

0800277c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
 8002788:	4613      	mov	r3, r2
 800278a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800279a:	883b      	ldrh	r3, [r7, #0]
 800279c:	0419      	lsls	r1, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
 80027a8:	e028      	b.n	80027fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e00d      	b.n	80027da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3340      	adds	r3, #64	; 0x40
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4413      	add	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	3b01      	subs	r3, #1
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3ec      	bcc.n	80027be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027e4:	883b      	ldrh	r3, [r7, #0]
 80027e6:	0418      	lsls	r0, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	4302      	orrs	r2, r0
 80027f4:	3340      	adds	r3, #64	; 0x40
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e267      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d075      	beq.n	800294e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d00c      	beq.n	8002888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002886:	d10b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05b      	beq.n	800294c <HAL_RCC_OscConfig+0x108>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d157      	bne.n	800294c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e242      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x74>
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a75      	ldr	r2, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6f      	ldr	r2, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6c      	ldr	r2, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028dc:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe f900 	bl	8000b00 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe f8fc 	bl	8000b00 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e207      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xc0>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe f8ec 	bl	8000b00 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe f8e8 	bl	8000b00 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1f3      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0xe8>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c7      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4937      	ldr	r1, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe f8a1 	bl	8000b00 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe f89d 	bl	8000b00 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a8      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4925      	ldr	r1, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe f880 	bl	8000b00 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe f87c 	bl	8000b00 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e187      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe f860 	bl	8000b00 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe f85c 	bl	8000b00 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e167      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x200>
 8002a62:	e01b      	b.n	8002a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f849 	bl	8000b00 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	e00e      	b.n	8002a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fe f845 	bl	8000b00 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d907      	bls.n	8002a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e150      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470000 	.word	0x42470000
 8002a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ea      	bne.n	8002a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8097 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a73      	ldr	r2, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fe f805 	bl	8000b00 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7fe f801 	bl	8000b00 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e10c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a63      	ldr	r2, [pc, #396]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x30c>
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a5e      	ldr	r2, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fd ffc6 	bl	8000b00 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fd ffc2 	bl	8000b00 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0cb      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ee      	beq.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fd ffb0 	bl	8000b00 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd ffac 	bl	8000b00 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0b5      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a1 	beq.w	8002d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d05c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d141      	bne.n	8002c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fd ff80 	bl	8000b00 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fd ff7c 	bl	8000b00 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e087      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fd ff55 	bl	8000b00 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fd ff51 	bl	8000b00 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e05c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x416>
 8002c78:	e054      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fd ff3e 	bl	8000b00 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fd ff3a 	bl	8000b00 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e045      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
 8002ca6:	e03d      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e038      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d121      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d111      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0cc      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d90c      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d044      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d119      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e067      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fd fe6c 	bl	8000b00 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fd fe68 	bl	8000b00 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e04f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d20c      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fdcc 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08007ed0 	.word	0x08007ed0
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b090      	sub	sp, #64	; 0x40
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f200 80a1 	bhi.w	800306c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f32:	e09b      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f38:	e09b      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3a:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f3e:	e098      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	627a      	str	r2, [r7, #36]	; 0x24
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	fb03 f201 	mul.w	r2, r3, r1
 8002f70:	2300      	movs	r3, #0
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	4a43      	ldr	r2, [pc, #268]	; (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f80:	460a      	mov	r2, r1
 8002f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f86:	4413      	add	r3, r2
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	61fa      	str	r2, [r7, #28]
 8002f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f9a:	f7fd f91d 	bl	80001d8 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	e053      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	2200      	movs	r2, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	617a      	str	r2, [r7, #20]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fba:	f04f 0b00 	mov.w	fp, #0
 8002fbe:	4652      	mov	r2, sl
 8002fc0:	465b      	mov	r3, fp
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	ebb2 080a 	subs.w	r8, r2, sl
 8002fda:	eb63 090b 	sbc.w	r9, r3, fp
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ff2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ff6:	eb63 0509 	sbc.w	r5, r3, r9
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	00eb      	lsls	r3, r5, #3
 8003004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003008:	00e2      	lsls	r2, r4, #3
 800300a:	4614      	mov	r4, r2
 800300c:	461d      	mov	r5, r3
 800300e:	eb14 030a 	adds.w	r3, r4, sl
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	eb45 030b 	adc.w	r3, r5, fp
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003026:	4629      	mov	r1, r5
 8003028:	028b      	lsls	r3, r1, #10
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003030:	4621      	mov	r1, r4
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	2200      	movs	r2, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	60fa      	str	r2, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	f7fd f8c8 	bl	80001d8 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800306a:	e002      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetSysClockFreq+0x184>)
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003074:	4618      	mov	r0, r3
 8003076:	3740      	adds	r7, #64	; 0x40
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	017d7840 	.word	0x017d7840

0800308c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08007ee0 	.word	0x08007ee0

080030cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e041      	b.n	8003162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fbe6 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 fafe 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_TIM_PWM_Start+0x24>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e022      	b.n	80031d6 <HAL_TIM_PWM_Start+0x6a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d109      	bne.n	80031aa <HAL_TIM_PWM_Start+0x3e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e015      	b.n	80031d6 <HAL_TIM_PWM_Start+0x6a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d109      	bne.n	80031c4 <HAL_TIM_PWM_Start+0x58>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e008      	b.n	80031d6 <HAL_TIM_PWM_Start+0x6a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e068      	b.n	80032b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0x82>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	e013      	b.n	8003216 <HAL_TIM_PWM_Start+0xaa>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0x92>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fc:	e00b      	b.n	8003216 <HAL_TIM_PWM_Start+0xaa>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0xa2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	e003      	b.n	8003216 <HAL_TIM_PWM_Start+0xaa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fcac 	bl	8003b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <HAL_TIM_PWM_Start+0x14c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d107      	bne.n	800323e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_TIM_PWM_Start+0x14c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d013      	beq.n	800327a <HAL_TIM_PWM_Start+0x10e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_TIM_PWM_Start+0x150>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_TIM_PWM_Start+0x10e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_TIM_PWM_Start+0x154>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_TIM_PWM_Start+0x10e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_TIM_PWM_Start+0x158>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIM_PWM_Start+0x10e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_TIM_PWM_Start+0x15c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d010      	beq.n	80032ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	e007      	b.n	80032ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40014000 	.word	0x40014000

080032cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fc4c 	bl	8003b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_TIM_PWM_Stop+0xc4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d117      	bne.n	800331e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_TIM_PWM_Stop+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	f240 4344 	movw	r3, #1092	; 0x444
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_TIM_PWM_Stop+0x52>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	f241 1311 	movw	r3, #4369	; 0x1111
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <HAL_TIM_PWM_Stop+0x82>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	f240 4344 	movw	r3, #1092	; 0x444
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d107      	bne.n	800334e <HAL_TIM_PWM_Stop+0x82>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Stop+0x92>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800335c:	e013      	b.n	8003386 <HAL_TIM_PWM_Stop+0xba>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Stop+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800336c:	e00b      	b.n	8003386 <HAL_TIM_PWM_Stop+0xba>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Stop+0xb2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	e003      	b.n	8003386 <HAL_TIM_PWM_Stop+0xba>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40010000 	.word	0x40010000

08003394 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f839 	bl	8003432 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 f99a 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003460:	2302      	movs	r3, #2
 8003462:	e088      	b.n	8003576 <HAL_TIM_IC_ConfigChannel+0x130>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11b      	bne.n	80034aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f000 f9c3 	bl	800380c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020c 	bic.w	r2, r2, #12
 8003494:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6999      	ldr	r1, [r3, #24]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
 80034a8:	e060      	b.n	800356c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11c      	bne.n	80034ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 fa3b 	bl	800393a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
 80034e8:	e040      	b.n	800356c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f000 fa88 	bl	8003a14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 020c 	bic.w	r2, r2, #12
 8003512:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69d9      	ldr	r1, [r3, #28]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
 8003526:	e021      	b.n	800356c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d11c      	bne.n	8003568 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f000 faa5 	bl	8003a8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003550:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
 8003566:	e001      	b.n	800356c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_TIM_ConfigClockSource+0x1c>
 8003596:	2302      	movs	r3, #2
 8003598:	e0b4      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x186>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d03e      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0xd4>
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	f200 8087 	bhi.w	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	f000 8086 	beq.w	80036f0 <HAL_TIM_ConfigClockSource+0x172>
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d87f      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 80035ea:	2b70      	cmp	r3, #112	; 0x70
 80035ec:	d01a      	beq.n	8003624 <HAL_TIM_ConfigClockSource+0xa6>
 80035ee:	2b70      	cmp	r3, #112	; 0x70
 80035f0:	d87b      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 80035f2:	2b60      	cmp	r3, #96	; 0x60
 80035f4:	d050      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x11a>
 80035f6:	2b60      	cmp	r3, #96	; 0x60
 80035f8:	d877      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	2b50      	cmp	r3, #80	; 0x50
 80035fc:	d03c      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xfa>
 80035fe:	2b50      	cmp	r3, #80	; 0x50
 8003600:	d873      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d058      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x13a>
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d86f      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 800360a:	2b30      	cmp	r3, #48	; 0x30
 800360c:	d064      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x15a>
 800360e:	2b30      	cmp	r3, #48	; 0x30
 8003610:	d86b      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d060      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d867      	bhi.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d05c      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x15a>
 800361e:	2b10      	cmp	r3, #16
 8003620:	d05a      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003622:	e062      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6899      	ldr	r1, [r3, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f000 fa82 	bl	8003b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003646:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
      break;
 8003650:	e04f      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f000 fa6b 	bl	8003b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e03c      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	461a      	mov	r2, r3
 8003686:	f000 f929 	bl	80038dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2150      	movs	r1, #80	; 0x50
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa38 	bl	8003b06 <TIM_ITRx_SetConfig>
      break;
 8003696:	e02c      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f000 f985 	bl	80039b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2160      	movs	r1, #96	; 0x60
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fa28 	bl	8003b06 <TIM_ITRx_SetConfig>
      break;
 80036b6:	e01c      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f000 f909 	bl	80038dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2140      	movs	r1, #64	; 0x40
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fa18 	bl	8003b06 <TIM_ITRx_SetConfig>
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 fa0f 	bl	8003b06 <TIM_ITRx_SetConfig>
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <TIM_Base_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00f      	beq.n	8003744 <TIM_Base_SetConfig+0x38>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x38>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <TIM_Base_SetConfig+0xe8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x38>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a30      	ldr	r2, [pc, #192]	; (80037f8 <TIM_Base_SetConfig+0xec>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x38>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <TIM_Base_SetConfig+0xf0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <TIM_Base_SetConfig+0xe4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01b      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d017      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <TIM_Base_SetConfig+0xe8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <TIM_Base_SetConfig+0xec>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00f      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <TIM_Base_SetConfig+0xf0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00b      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <TIM_Base_SetConfig+0xf4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <TIM_Base_SetConfig+0xf8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_Base_SetConfig+0x8a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <TIM_Base_SetConfig+0xfc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d108      	bne.n	80037a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <TIM_Base_SetConfig+0xe4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d103      	bne.n	80037dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	615a      	str	r2, [r3, #20]
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40014000 	.word	0x40014000
 8003804:	40014400 	.word	0x40014400
 8003808:	40014800 	.word	0x40014800

0800380c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <TIM_TI1_SetConfig+0xbc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <TIM_TI1_SetConfig+0x56>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d00f      	beq.n	8003862 <TIM_TI1_SetConfig+0x56>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_TI1_SetConfig+0xc0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_TI1_SetConfig+0x56>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <TIM_TI1_SetConfig+0xc4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_TI1_SetConfig+0x56>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <TIM_TI1_SetConfig+0xc8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_TI1_SetConfig+0x56>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <TIM_TI1_SetConfig+0xcc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <TIM_TI1_SetConfig+0x5a>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <TIM_TI1_SetConfig+0x5c>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e003      	b.n	8003886 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	b2db      	uxtb	r3, r3
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f023 030a 	bic.w	r3, r3, #10
 80038a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f003 030a 	and.w	r3, r3, #10
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40014000 	.word	0x40014000

080038dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 030a 	bic.w	r3, r3, #10
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800393a:	b480      	push	{r7}
 800393c:	b087      	sub	sp, #28
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f023 0210 	bic.w	r2, r3, #16
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	b29b      	uxth	r3, r3
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800398c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f023 0210 	bic.w	r2, r3, #16
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	031b      	lsls	r3, r3, #12
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 0303 	bic.w	r3, r3, #3
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	031b      	lsls	r3, r3, #12
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	031b      	lsls	r3, r3, #12
 8003ae4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f043 0307 	orr.w	r3, r3, #7
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	609a      	str	r2, [r3, #8]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e050      	b.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d013      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10c      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	40014000 	.word	0x40014000

08003ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	f107 001c 	add.w	r0, r7, #28
 8003cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d122      	bne.n	8003d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 fbee 	bl	80054d8 <USB_CoreReset>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	e01a      	b.n	8003d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f001 fbe2 	bl	80054d8 <USB_CoreReset>
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
 8003d2a:	e005      	b.n	8003d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d10b      	bne.n	8003d56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f043 0206 	orr.w	r2, r3, #6
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d62:	b004      	add	sp, #16
 8003d64:	4770      	bx	lr
	...

08003d68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d165      	bne.n	8003e48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <USB_SetTurnaroundTime+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d906      	bls.n	8003d92 <USB_SetTurnaroundTime+0x2a>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <USB_SetTurnaroundTime+0x120>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d202      	bcs.n	8003d92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d8c:	230f      	movs	r3, #15
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e062      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <USB_SetTurnaroundTime+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d306      	bcc.n	8003da8 <USB_SetTurnaroundTime+0x40>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <USB_SetTurnaroundTime+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d202      	bcs.n	8003da8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003da2:	230e      	movs	r3, #14
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e057      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a38      	ldr	r2, [pc, #224]	; (8003e8c <USB_SetTurnaroundTime+0x124>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d306      	bcc.n	8003dbe <USB_SetTurnaroundTime+0x56>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a37      	ldr	r2, [pc, #220]	; (8003e90 <USB_SetTurnaroundTime+0x128>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d202      	bcs.n	8003dbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003db8:	230d      	movs	r3, #13
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e04c      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <USB_SetTurnaroundTime+0x128>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d306      	bcc.n	8003dd4 <USB_SetTurnaroundTime+0x6c>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a32      	ldr	r2, [pc, #200]	; (8003e94 <USB_SetTurnaroundTime+0x12c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003dce:	230c      	movs	r3, #12
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e041      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <USB_SetTurnaroundTime+0x12c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d906      	bls.n	8003dea <USB_SetTurnaroundTime+0x82>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a2e      	ldr	r2, [pc, #184]	; (8003e98 <USB_SetTurnaroundTime+0x130>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d802      	bhi.n	8003dea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003de4:	230b      	movs	r3, #11
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e036      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <USB_SetTurnaroundTime+0x130>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d906      	bls.n	8003e00 <USB_SetTurnaroundTime+0x98>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <USB_SetTurnaroundTime+0x134>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d802      	bhi.n	8003e00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e02b      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <USB_SetTurnaroundTime+0x134>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d906      	bls.n	8003e16 <USB_SetTurnaroundTime+0xae>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <USB_SetTurnaroundTime+0x138>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d202      	bcs.n	8003e16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e10:	2309      	movs	r3, #9
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e020      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <USB_SetTurnaroundTime+0x138>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d306      	bcc.n	8003e2c <USB_SetTurnaroundTime+0xc4>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <USB_SetTurnaroundTime+0x13c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d802      	bhi.n	8003e2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e26:	2308      	movs	r3, #8
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e015      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <USB_SetTurnaroundTime+0x13c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d906      	bls.n	8003e42 <USB_SetTurnaroundTime+0xda>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a1c      	ldr	r2, [pc, #112]	; (8003ea8 <USB_SetTurnaroundTime+0x140>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d202      	bcs.n	8003e42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e3c:	2307      	movs	r3, #7
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e00a      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e42:	2306      	movs	r3, #6
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e007      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e4e:	2309      	movs	r3, #9
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e001      	b.n	8003e58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e54:	2309      	movs	r3, #9
 8003e56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	029b      	lsls	r3, r3, #10
 8003e6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	00d8acbf 	.word	0x00d8acbf
 8003e88:	00e4e1c0 	.word	0x00e4e1c0
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	01067380 	.word	0x01067380
 8003e94:	011a499f 	.word	0x011a499f
 8003e98:	01312cff 	.word	0x01312cff
 8003e9c:	014ca43f 	.word	0x014ca43f
 8003ea0:	016e3600 	.word	0x016e3600
 8003ea4:	01a6ab1f 	.word	0x01a6ab1f
 8003ea8:	01e84800 	.word	0x01e84800

08003eac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d115      	bne.n	8003f3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fc fdfa 	bl	8000b18 <HAL_Delay>
      ms++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 fa45 	bl	80053ba <USB_GetMode>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d01e      	beq.n	8003f74 <USB_SetCurrentMode+0x84>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b31      	cmp	r3, #49	; 0x31
 8003f3a:	d9f0      	bls.n	8003f1e <USB_SetCurrentMode+0x2e>
 8003f3c:	e01a      	b.n	8003f74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d115      	bne.n	8003f70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7fc fde1 	bl	8000b18 <HAL_Delay>
      ms++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 fa2c 	bl	80053ba <USB_GetMode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <USB_SetCurrentMode+0x84>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b31      	cmp	r3, #49	; 0x31
 8003f6c:	d9f0      	bls.n	8003f50 <USB_SetCurrentMode+0x60>
 8003f6e:	e001      	b.n	8003f74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e005      	b.n	8003f80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b32      	cmp	r3, #50	; 0x32
 8003f78:	d101      	bne.n	8003f7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f88:	b084      	sub	sp, #16
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	e009      	b.n	8003fbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3340      	adds	r3, #64	; 0x40
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b0e      	cmp	r3, #14
 8003fc0:	d9f2      	bls.n	8003fa8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11c      	bne.n	8004002 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8004000:	e00b      	b.n	800401a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402c:	4619      	mov	r1, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	461a      	mov	r2, r3
 8004036:	680b      	ldr	r3, [r1, #0]
 8004038:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10c      	bne.n	800405a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004046:	2100      	movs	r1, #0
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f965 	bl	8004318 <USB_SetDevSpeed>
 800404e:	e008      	b.n	8004062 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004050:	2101      	movs	r1, #1
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f960 	bl	8004318 <USB_SetDevSpeed>
 8004058:	e003      	b.n	8004062 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800405a:	2103      	movs	r1, #3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f95b 	bl	8004318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004062:	2110      	movs	r1, #16
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8f3 	bl	8004250 <USB_FlushTxFifo>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f91f 	bl	80042b8 <USB_FlushRxFifo>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	e043      	b.n	8004136 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c4:	d118      	bne.n	80040f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	461a      	mov	r2, r3
 80040da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e013      	b.n	800410a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	461a      	mov	r2, r3
 80040f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e008      	b.n	800410a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	461a      	mov	r2, r3
 8004106:	2300      	movs	r3, #0
 8004108:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	461a      	mov	r2, r3
 800412a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800412e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3301      	adds	r3, #1
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3b7      	bcc.n	80040ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e043      	b.n	80041cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d118      	bne.n	800418e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e013      	b.n	80041a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e008      	b.n	80041a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041be:	461a      	mov	r2, r3
 80041c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3301      	adds	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3b7      	bcc.n	8004144 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f043 0210 	orr.w	r2, r3, #16
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <USB_DevInit+0x2c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f043 0208 	orr.w	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004248:	b004      	add	sp, #16
 800424a:	4770      	bx	lr
 800424c:	803c3800 	.word	0x803c3800

08004250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <USB_FlushTxFifo+0x64>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e01b      	b.n	80042a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	daf2      	bge.n	800425e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	019b      	lsls	r3, r3, #6
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3301      	adds	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <USB_FlushTxFifo+0x64>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e006      	b.n	80042a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d0f0      	beq.n	8004288 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	00030d40 	.word	0x00030d40

080042b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a11      	ldr	r2, [pc, #68]	; (8004314 <USB_FlushRxFifo+0x5c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e018      	b.n	8004308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	daf2      	bge.n	80042c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2210      	movs	r2, #16
 80042e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <USB_FlushRxFifo+0x5c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e006      	b.n	8004308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d0f0      	beq.n	80042e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	00030d40 	.word	0x00030d40

08004318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800436a:	2300      	movs	r3, #0
 800436c:	75fb      	strb	r3, [r7, #23]
 800436e:	e00a      	b.n	8004386 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d002      	beq.n	800437c <USB_GetDevSpeed+0x32>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b06      	cmp	r3, #6
 800437a:	d102      	bne.n	8004382 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800437c:	2302      	movs	r3, #2
 800437e:	75fb      	strb	r3, [r7, #23]
 8004380:	e001      	b.n	8004386 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004382:	230f      	movs	r3, #15
 8004384:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d13a      	bne.n	8004426 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d155      	bne.n	8004494 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	791b      	ldrb	r3, [r3, #4]
 8004402:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004404:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	059b      	lsls	r3, r3, #22
 800440a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800440c:	4313      	orrs	r3, r2
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e036      	b.n	8004494 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004444:	4313      	orrs	r3, r2
 8004446:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11a      	bne.n	8004494 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800447a:	430b      	orrs	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004492:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d161      	bne.n	8004584 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d6:	d11f      	bne.n	8004518 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	b29b      	uxth	r3, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004538:	4013      	ands	r3, r2
 800453a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800455c:	4013      	ands	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	0159      	lsls	r1, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	440b      	add	r3, r1
 8004576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457a:	4619      	mov	r1, r3
 800457c:	4b35      	ldr	r3, [pc, #212]	; (8004654 <USB_DeactivateEndpoint+0x1b0>)
 800457e:	4013      	ands	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
 8004582:	e060      	b.n	8004646 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459a:	d11f      	bne.n	80045dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	43db      	mvns	r3, r3
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fc:	4013      	ands	r3, r2
 80045fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	43db      	mvns	r3, r3
 800461a:	68f9      	ldr	r1, [r7, #12]
 800461c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004620:	4013      	ands	r3, r2
 8004622:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0159      	lsls	r1, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	440b      	add	r3, r1
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	4619      	mov	r1, r3
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <USB_DeactivateEndpoint+0x1b4>)
 8004642:	4013      	ands	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	ec337800 	.word	0xec337800
 8004658:	eff37800 	.word	0xeff37800

0800465c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	f040 815c 	bne.w	8004936 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d132      	bne.n	80046ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	0151      	lsls	r1, r2, #5
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	440a      	add	r2, r1
 800469c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	0cdb      	lsrs	r3, r3, #19
 80046e6:	04db      	lsls	r3, r3, #19
 80046e8:	6113      	str	r3, [r2, #16]
 80046ea:	e074      	b.n	80047d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004706:	0cdb      	lsrs	r3, r3, #19
 8004708:	04db      	lsls	r3, r3, #19
 800470a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800472a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800472e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6999      	ldr	r1, [r3, #24]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	440b      	add	r3, r1
 8004748:	1e59      	subs	r1, r3, #1
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004752:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004754:	4b9d      	ldr	r3, [pc, #628]	; (80049cc <USB_EPStartXfer+0x370>)
 8004756:	400b      	ands	r3, r1
 8004758:	69b9      	ldr	r1, [r7, #24]
 800475a:	0148      	lsls	r0, r1, #5
 800475c:	69f9      	ldr	r1, [r7, #28]
 800475e:	4401      	add	r1, r0
 8004760:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004764:	4313      	orrs	r3, r2
 8004766:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	0148      	lsls	r0, r1, #5
 8004782:	69f9      	ldr	r1, [r7, #28]
 8004784:	4401      	add	r1, r0
 8004786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800478a:	4313      	orrs	r3, r2
 800478c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d11f      	bne.n	80047d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d14b      	bne.n	8004874 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	461a      	mov	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d128      	bne.n	8004852 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d110      	bne.n	8004832 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e00f      	b.n	8004852 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e133      	b.n	8004adc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004892:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	791b      	ldrb	r3, [r3, #4]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d015      	beq.n	80048c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 811b 	beq.w	8004adc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c2:	4313      	orrs	r3, r2
 80048c4:	634b      	str	r3, [r1, #52]	; 0x34
 80048c6:	e109      	b.n	8004adc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d110      	bne.n	80048fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e00f      	b.n	800491a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	b298      	uxth	r0, r3
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4603      	mov	r3, r0
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fade 	bl	8004ef0 <USB_WritePacket>
 8004934:	e0d2      	b.n	8004adc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004950:	0cdb      	lsrs	r3, r3, #19
 8004952:	04db      	lsls	r3, r3, #19
 8004954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d126      	bne.n	80049d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	0148      	lsls	r0, r1, #5
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	4401      	add	r1, r0
 80049a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049a4:	4313      	orrs	r3, r2
 80049a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049c6:	6113      	str	r3, [r2, #16]
 80049c8:	e03a      	b.n	8004a40 <USB_EPStartXfer+0x3e4>
 80049ca:	bf00      	nop
 80049cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	8afa      	ldrh	r2, [r7, #22]
 80049ec:	fb03 f202 	mul.w	r2, r3, r2
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	8afb      	ldrh	r3, [r7, #22]
 8004a04:	04d9      	lsls	r1, r3, #19
 8004a06:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <USB_EPStartXfer+0x48c>)
 8004a08:	400b      	ands	r3, r1
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	0148      	lsls	r0, r1, #5
 8004a0e:	69f9      	ldr	r1, [r7, #28]
 8004a10:	4401      	add	r1, r0
 8004a12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a16:	4313      	orrs	r3, r2
 8004a18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	69b9      	ldr	r1, [r7, #24]
 8004a32:	0148      	lsls	r0, r1, #5
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	4401      	add	r1, r0
 8004a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10d      	bne.n	8004a62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	460a      	mov	r2, r1
 8004a60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d128      	bne.n	8004abc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d110      	bne.n	8004a9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00f      	b.n	8004abc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	1ff80000 	.word	0x1ff80000

08004aec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 80ce 	bne.w	8004caa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d132      	bne.n	8004b7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	0cdb      	lsrs	r3, r3, #19
 8004b76:	04db      	lsls	r3, r3, #19
 8004b78:	6113      	str	r3, [r2, #16]
 8004b7a:	e04e      	b.n	8004c1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	0cdb      	lsrs	r3, r3, #19
 8004b98:	04db      	lsls	r3, r3, #19
 8004b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bbe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d903      	bls.n	8004bd4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0a:	6939      	ldr	r1, [r7, #16]
 8004c0c:	0148      	lsls	r0, r1, #5
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	4401      	add	r1, r0
 8004c12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c16:	4313      	orrs	r3, r2
 8004c18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11e      	bne.n	8004c5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e097      	b.n	8004d8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8083 	beq.w	8004d8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	634b      	str	r3, [r1, #52]	; 0x34
 8004ca8:	e071      	b.n	8004d8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc4:	0cdb      	lsrs	r3, r3, #19
 8004cc6:	04db      	lsls	r3, r3, #19
 8004cc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3c:	6939      	ldr	r1, [r7, #16]
 8004d3e:	0148      	lsls	r0, r1, #5
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	4401      	add	r1, r0
 8004d44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10d      	bne.n	8004d6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6919      	ldr	r1, [r3, #16]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d14a      	bne.n	8004e50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd2:	f040 8086 	bne.w	8004ee2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d902      	bls.n	8004e34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
          break;
 8004e32:	e056      	b.n	8004ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4c:	d0e7      	beq.n	8004e1e <USB_EPStopXfer+0x82>
 8004e4e:	e048      	b.n	8004ee2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e68:	d13b      	bne.n	8004ee2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d902      	bls.n	8004ec8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ec6:	e00c      	b.n	8004ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee0:	d0e7      	beq.n	8004eb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	460b      	mov	r3, r1
 8004f00:	71fb      	strb	r3, [r7, #7]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d123      	bne.n	8004f5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f16:	88bb      	ldrh	r3, [r7, #4]
 8004f18:	3303      	adds	r3, #3
 8004f1a:	089b      	lsrs	r3, r3, #2
 8004f1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e018      	b.n	8004f56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	031a      	lsls	r2, r3, #12
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f30:	461a      	mov	r2, r3
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3e2      	bcc.n	8004f24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3724      	adds	r7, #36	; 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b08b      	sub	sp, #44	; 0x2c
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e014      	b.n	8004fc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	3301      	adds	r3, #1
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3e6      	bcc.n	8004f98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fca:	8bfb      	ldrh	r3, [r7, #30]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01e      	beq.n	800500e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f107 0310 	add.w	r3, r7, #16
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	3301      	adds	r3, #1
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005002:	8bfb      	ldrh	r3, [r7, #30]
 8005004:	3b01      	subs	r3, #1
 8005006:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005008:	8bfb      	ldrh	r3, [r7, #30]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ea      	bne.n	8004fe4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005010:	4618      	mov	r0, r3
 8005012:	372c      	adds	r7, #44	; 0x2c
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d12c      	bne.n	8005092 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	db12      	blt.n	8005070 <USB_EPSetStall+0x54>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00f      	beq.n	8005070 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800506e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e02b      	b.n	80050ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	db12      	blt.n	80050ca <USB_EPSetStall+0xae>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00f      	beq.n	80050ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d128      	bne.n	8005166 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005132:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	791b      	ldrb	r3, [r3, #4]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d003      	beq.n	8005144 <USB_EPClearStall+0x4c>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	791b      	ldrb	r3, [r3, #4]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d138      	bne.n	80051b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e027      	b.n	80051b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005184:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d003      	beq.n	8005196 <USB_EPClearStall+0x9e>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	791b      	ldrb	r3, [r3, #4]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d10f      	bne.n	80051b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800523e:	f023 0302 	bic.w	r3, r3, #2
 8005242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0c1b      	lsrs	r3, r3, #16
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005350:	68bb      	ldr	r3, [r7, #8]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	b2db      	uxtb	r3, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053ac:	68bb      	ldr	r3, [r7, #8]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0301 	and.w	r3, r3, #1
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	460b      	mov	r3, r1
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	333c      	adds	r3, #60	; 0x3c
 8005432:	3304      	adds	r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <USB_EP0_OutStart+0xb8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d90a      	bls.n	8005456 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005450:	d101      	bne.n	8005456 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e037      	b.n	80054c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	461a      	mov	r2, r3
 800545e:	2300      	movs	r3, #0
 8005460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005484:	f043 0318 	orr.w	r3, r3, #24
 8005488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005498:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800549c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10f      	bne.n	80054c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	4f54300a 	.word	0x4f54300a

080054d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <USB_CoreReset+0x64>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e01b      	b.n	800552e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	daf2      	bge.n	80054e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <USB_CoreReset+0x64>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e006      	b.n	800552e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d0f0      	beq.n	800550e <USB_CoreReset+0x36>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	00030d40 	.word	0x00030d40

08005540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800554c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005550:	f002 fc1e 	bl	8007d90 <USBD_static_malloc>
 8005554:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	32b0      	adds	r2, #176	; 0xb0
 8005566:	2100      	movs	r1, #0
 8005568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800556c:	2302      	movs	r3, #2
 800556e:	e0d4      	b.n	800571a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005570:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005574:	2100      	movs	r1, #0
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f002 fc4e 	bl	8007e18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	32b0      	adds	r2, #176	; 0xb0
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	32b0      	adds	r2, #176	; 0xb0
 8005596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7c1b      	ldrb	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d138      	bne.n	800561a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055a8:	4b5e      	ldr	r3, [pc, #376]	; (8005724 <USBD_CDC_Init+0x1e4>)
 80055aa:	7819      	ldrb	r1, [r3, #0]
 80055ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b0:	2202      	movs	r2, #2
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f002 fac9 	bl	8007b4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055b8:	4b5a      	ldr	r3, [pc, #360]	; (8005724 <USBD_CDC_Init+0x1e4>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	2201      	movs	r2, #1
 80055d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055d2:	4b55      	ldr	r3, [pc, #340]	; (8005728 <USBD_CDC_Init+0x1e8>)
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055da:	2202      	movs	r2, #2
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 fab4 	bl	8007b4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <USBD_CDC_Init+0x1e8>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055fa:	2201      	movs	r2, #1
 80055fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055fe:	4b4b      	ldr	r3, [pc, #300]	; (800572c <USBD_CDC_Init+0x1ec>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	3326      	adds	r3, #38	; 0x26
 8005614:	2210      	movs	r2, #16
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e035      	b.n	8005686 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800561a:	4b42      	ldr	r3, [pc, #264]	; (8005724 <USBD_CDC_Init+0x1e4>)
 800561c:	7819      	ldrb	r1, [r3, #0]
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	2202      	movs	r2, #2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f002 fa91 	bl	8007b4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005628:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <USBD_CDC_Init+0x1e4>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	2201      	movs	r2, #1
 8005640:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005642:	4b39      	ldr	r3, [pc, #228]	; (8005728 <USBD_CDC_Init+0x1e8>)
 8005644:	7819      	ldrb	r1, [r3, #0]
 8005646:	2340      	movs	r3, #64	; 0x40
 8005648:	2202      	movs	r2, #2
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f002 fa7d 	bl	8007b4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005650:	4b35      	ldr	r3, [pc, #212]	; (8005728 <USBD_CDC_Init+0x1e8>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005668:	2201      	movs	r2, #1
 800566a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800566c:	4b2f      	ldr	r3, [pc, #188]	; (800572c <USBD_CDC_Init+0x1ec>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3326      	adds	r3, #38	; 0x26
 8005682:	2210      	movs	r2, #16
 8005684:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005686:	4b29      	ldr	r3, [pc, #164]	; (800572c <USBD_CDC_Init+0x1ec>)
 8005688:	7819      	ldrb	r1, [r3, #0]
 800568a:	2308      	movs	r3, #8
 800568c:	2203      	movs	r2, #3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f002 fa5b 	bl	8007b4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <USBD_CDC_Init+0x1ec>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 020f 	and.w	r2, r3, #15
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	3324      	adds	r3, #36	; 0x24
 80056aa:	2201      	movs	r2, #1
 80056ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	33b0      	adds	r3, #176	; 0xb0
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e018      	b.n	800571a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	7c1b      	ldrb	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <USBD_CDC_Init+0x1e8>)
 80056f2:	7819      	ldrb	r1, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 fb12 	bl	8007d28 <USBD_LL_PrepareReceive>
 8005704:	e008      	b.n	8005718 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <USBD_CDC_Init+0x1e8>)
 8005708:	7819      	ldrb	r1, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f002 fb08 	bl	8007d28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000093 	.word	0x20000093
 8005728:	20000094 	.word	0x20000094
 800572c:	20000095 	.word	0x20000095

08005730 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <USBD_CDC_DeInit+0xf8>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f002 fa27 	bl	8007b96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005748:	4b37      	ldr	r3, [pc, #220]	; (8005828 <USBD_CDC_DeInit+0xf8>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3324      	adds	r3, #36	; 0x24
 800575e:	2200      	movs	r2, #0
 8005760:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005762:	4b32      	ldr	r3, [pc, #200]	; (800582c <USBD_CDC_DeInit+0xfc>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f002 fa14 	bl	8007b96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800576e:	4b2f      	ldr	r3, [pc, #188]	; (800582c <USBD_CDC_DeInit+0xfc>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005786:	2200      	movs	r2, #0
 8005788:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <USBD_CDC_DeInit+0x100>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 fa00 	bl	8007b96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <USBD_CDC_DeInit+0x100>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f003 020f 	and.w	r2, r3, #15
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	2200      	movs	r2, #0
 80057ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80057b0:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <USBD_CDC_DeInit+0x100>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f003 020f 	and.w	r2, r3, #15
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	3326      	adds	r3, #38	; 0x26
 80057c6:	2200      	movs	r2, #0
 80057c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	32b0      	adds	r2, #176	; 0xb0
 80057d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01f      	beq.n	800581c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	33b0      	adds	r3, #176	; 0xb0
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	32b0      	adds	r2, #176	; 0xb0
 80057fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fe:	4618      	mov	r0, r3
 8005800:	f002 fad4 	bl	8007dac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32b0      	adds	r2, #176	; 0xb0
 800580e:	2100      	movs	r1, #0
 8005810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000093 	.word	0x20000093
 800582c:	20000094 	.word	0x20000094
 8005830:	20000095 	.word	0x20000095

08005834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	32b0      	adds	r2, #176	; 0xb0
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e0bf      	b.n	80059e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800586c:	2b00      	cmp	r3, #0
 800586e:	d050      	beq.n	8005912 <USBD_CDC_Setup+0xde>
 8005870:	2b20      	cmp	r3, #32
 8005872:	f040 80af 	bne.w	80059d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	88db      	ldrh	r3, [r3, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d03a      	beq.n	80058f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b25b      	sxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	da1b      	bge.n	80058c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	33b0      	adds	r3, #176	; 0xb0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800589e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	88d2      	ldrh	r2, [r2, #6]
 80058a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	88db      	ldrh	r3, [r3, #6]
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	bf28      	it	cs
 80058ae:	2307      	movcs	r3, #7
 80058b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	89fa      	ldrh	r2, [r7, #14]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fd43 	bl	8007344 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80058be:	e090      	b.n	80059e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	785a      	ldrb	r2, [r3, #1]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	88db      	ldrh	r3, [r3, #6]
 80058ce:	2b3f      	cmp	r3, #63	; 0x3f
 80058d0:	d803      	bhi.n	80058da <USBD_CDC_Setup+0xa6>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	88db      	ldrh	r3, [r3, #6]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	e000      	b.n	80058dc <USBD_CDC_Setup+0xa8>
 80058da:	2240      	movs	r2, #64	; 0x40
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058e2:	6939      	ldr	r1, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058ea:	461a      	mov	r2, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fd55 	bl	800739c <USBD_CtlPrepareRx>
      break;
 80058f2:	e076      	b.n	80059e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	33b0      	adds	r3, #176	; 0xb0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	7850      	ldrb	r0, [r2, #1]
 800590a:	2200      	movs	r2, #0
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	4798      	blx	r3
      break;
 8005910:	e067      	b.n	80059e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b0b      	cmp	r3, #11
 8005918:	d851      	bhi.n	80059be <USBD_CDC_Setup+0x18a>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <USBD_CDC_Setup+0xec>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005951 	.word	0x08005951
 8005924:	080059cd 	.word	0x080059cd
 8005928:	080059bf 	.word	0x080059bf
 800592c:	080059bf 	.word	0x080059bf
 8005930:	080059bf 	.word	0x080059bf
 8005934:	080059bf 	.word	0x080059bf
 8005938:	080059bf 	.word	0x080059bf
 800593c:	080059bf 	.word	0x080059bf
 8005940:	080059bf 	.word	0x080059bf
 8005944:	080059bf 	.word	0x080059bf
 8005948:	0800597b 	.word	0x0800597b
 800594c:	080059a5 	.word	0x080059a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b03      	cmp	r3, #3
 800595a:	d107      	bne.n	800596c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800595c:	f107 030a 	add.w	r3, r7, #10
 8005960:	2202      	movs	r2, #2
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fced 	bl	8007344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800596a:	e032      	b.n	80059d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fc77 	bl	8007262 <USBD_CtlError>
            ret = USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	75fb      	strb	r3, [r7, #23]
          break;
 8005978:	e02b      	b.n	80059d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005986:	f107 030d 	add.w	r3, r7, #13
 800598a:	2201      	movs	r2, #1
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fcd8 	bl	8007344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005994:	e01d      	b.n	80059d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fc62 	bl	8007262 <USBD_CtlError>
            ret = USBD_FAIL;
 800599e:	2303      	movs	r3, #3
 80059a0:	75fb      	strb	r3, [r7, #23]
          break;
 80059a2:	e016      	b.n	80059d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d00f      	beq.n	80059d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fc55 	bl	8007262 <USBD_CtlError>
            ret = USBD_FAIL;
 80059b8:	2303      	movs	r3, #3
 80059ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059bc:	e008      	b.n	80059d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fc4e 	bl	8007262 <USBD_CtlError>
          ret = USBD_FAIL;
 80059c6:	2303      	movs	r3, #3
 80059c8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ca:	e002      	b.n	80059d2 <USBD_CDC_Setup+0x19e>
          break;
 80059cc:	bf00      	nop
 80059ce:	e008      	b.n	80059e2 <USBD_CDC_Setup+0x1ae>
          break;
 80059d0:	bf00      	nop
      }
      break;
 80059d2:	e006      	b.n	80059e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fc43 	bl	8007262 <USBD_CtlError>
      ret = USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	75fb      	strb	r3, [r7, #23]
      break;
 80059e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	32b0      	adds	r2, #176	; 0xb0
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e065      	b.n	8005ae2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	32b0      	adds	r2, #176	; 0xb0
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3318      	adds	r3, #24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02f      	beq.n	8005aa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	f003 020f 	and.w	r2, r3, #15
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3318      	adds	r3, #24
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f003 010f 	and.w	r1, r3, #15
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4403      	add	r3, r0
 8005a68:	3348      	adds	r3, #72	; 0x48
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d112      	bne.n	8005aa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a92:	78f9      	ldrb	r1, [r7, #3]
 8005a94:	2300      	movs	r3, #0
 8005a96:	2200      	movs	r2, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 f924 	bl	8007ce6 <USBD_LL_Transmit>
 8005a9e:	e01f      	b.n	8005ae0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	33b0      	adds	r3, #176	; 0xb0
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d010      	beq.n	8005ae0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	33b0      	adds	r3, #176	; 0xb0
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	32b0      	adds	r2, #176	; 0xb0
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	32b0      	adds	r2, #176	; 0xb0
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e01a      	b.n	8005b52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f002 f922 	bl	8007d6a <USBD_LL_GetRxDataSize>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	33b0      	adds	r3, #176	; 0xb0
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	32b0      	adds	r2, #176	; 0xb0
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e025      	b.n	8005bc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	33b0      	adds	r3, #176	; 0xb0
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <USBD_CDC_EP0_RxReady+0x6c>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b96:	2bff      	cmp	r3, #255	; 0xff
 8005b98:	d015      	beq.n	8005bc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	33b0      	adds	r3, #176	; 0xb0
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005bb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bd8:	2182      	movs	r1, #130	; 0x82
 8005bda:	4818      	ldr	r0, [pc, #96]	; (8005c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bdc:	f000 fd09 	bl	80065f2 <USBD_GetEpDesc>
 8005be0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005be2:	2101      	movs	r1, #1
 8005be4:	4815      	ldr	r0, [pc, #84]	; (8005c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005be6:	f000 fd04 	bl	80065f2 <USBD_GetEpDesc>
 8005bea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bec:	2181      	movs	r1, #129	; 0x81
 8005bee:	4813      	ldr	r0, [pc, #76]	; (8005c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bf0:	f000 fcff 	bl	80065f2 <USBD_GetEpDesc>
 8005bf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c10:	711a      	strb	r2, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c24:	711a      	strb	r2, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2243      	movs	r2, #67	; 0x43
 8005c2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c30:	4b02      	ldr	r3, [pc, #8]	; (8005c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000050 	.word	0x20000050

08005c40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c48:	2182      	movs	r1, #130	; 0x82
 8005c4a:	4818      	ldr	r0, [pc, #96]	; (8005cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c4c:	f000 fcd1 	bl	80065f2 <USBD_GetEpDesc>
 8005c50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c52:	2101      	movs	r1, #1
 8005c54:	4815      	ldr	r0, [pc, #84]	; (8005cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c56:	f000 fccc 	bl	80065f2 <USBD_GetEpDesc>
 8005c5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c5c:	2181      	movs	r1, #129	; 0x81
 8005c5e:	4813      	ldr	r0, [pc, #76]	; (8005cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c60:	f000 fcc7 	bl	80065f2 <USBD_GetEpDesc>
 8005c64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d006      	beq.n	8005c86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	711a      	strb	r2, [r3, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f042 0202 	orr.w	r2, r2, #2
 8005c84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	711a      	strb	r2, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f042 0202 	orr.w	r2, r2, #2
 8005c98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2243      	movs	r2, #67	; 0x43
 8005c9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ca0:	4b02      	ldr	r3, [pc, #8]	; (8005cac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000050 	.word	0x20000050

08005cb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cb8:	2182      	movs	r1, #130	; 0x82
 8005cba:	4818      	ldr	r0, [pc, #96]	; (8005d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cbc:	f000 fc99 	bl	80065f2 <USBD_GetEpDesc>
 8005cc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4815      	ldr	r0, [pc, #84]	; (8005d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cc6:	f000 fc94 	bl	80065f2 <USBD_GetEpDesc>
 8005cca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ccc:	2181      	movs	r1, #129	; 0x81
 8005cce:	4813      	ldr	r0, [pc, #76]	; (8005d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cd0:	f000 fc8f 	bl	80065f2 <USBD_GetEpDesc>
 8005cd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2210      	movs	r2, #16
 8005ce0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d006      	beq.n	8005cf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf0:	711a      	strb	r2, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d04:	711a      	strb	r2, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2243      	movs	r2, #67	; 0x43
 8005d0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000050 	.word	0x20000050

08005d20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e009      	b.n	8005d68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	33b0      	adds	r3, #176	; 0xb0
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	32b0      	adds	r2, #176	; 0xb0
 8005d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e008      	b.n	8005dac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	32b0      	adds	r2, #176	; 0xb0
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e004      	b.n	8005de6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	32b0      	adds	r2, #176	; 0xb0
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32b0      	adds	r2, #176	; 0xb0
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e018      	b.n	8005e54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7c1b      	ldrb	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <USBD_CDC_ReceivePacket+0x68>)
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 ff75 	bl	8007d28 <USBD_LL_PrepareReceive>
 8005e3e:	e008      	b.n	8005e52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <USBD_CDC_ReceivePacket+0x68>)
 8005e42:	7819      	ldrb	r1, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e4a:	2340      	movs	r3, #64	; 0x40
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 ff6b 	bl	8007d28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000094 	.word	0x20000094

08005e60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e01f      	b.n	8005eb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	79fa      	ldrb	r2, [r7, #7]
 8005eaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 fde5 	bl	8007a7c <USBD_LL_Init>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e025      	b.n	8005f24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	32ae      	adds	r2, #174	; 0xae
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00f      	beq.n	8005f14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	; 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f107 020e 	add.w	r2, r7, #14
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fded 	bl	8007b14 <USBD_LL_Start>
 8005f3a:	4603      	mov	r3, r0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
 8005f84:	4603      	mov	r3, r0
 8005f86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	4611      	mov	r1, r2
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f908 	bl	80071ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d01a      	beq.n	8006038 <USBD_LL_SetupStage+0x72>
 8006002:	2b02      	cmp	r3, #2
 8006004:	d822      	bhi.n	800604c <USBD_LL_SetupStage+0x86>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <USBD_LL_SetupStage+0x4a>
 800600a:	2b01      	cmp	r3, #1
 800600c:	d00a      	beq.n	8006024 <USBD_LL_SetupStage+0x5e>
 800600e:	e01d      	b.n	800604c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fb5f 	bl	80066dc <USBD_StdDevReq>
 800601e:	4603      	mov	r3, r0
 8006020:	73fb      	strb	r3, [r7, #15]
      break;
 8006022:	e020      	b.n	8006066 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fbc7 	bl	80067c0 <USBD_StdItfReq>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]
      break;
 8006036:	e016      	b.n	8006066 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fc29 	bl	8006898 <USBD_StdEPReq>
 8006046:	4603      	mov	r3, r0
 8006048:	73fb      	strb	r3, [r7, #15]
      break;
 800604a:	e00c      	b.n	8006066 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006052:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006056:	b2db      	uxtb	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fdba 	bl	8007bd4 <USBD_LL_StallEP>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	bf00      	nop
  }

  return ret;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	460b      	mov	r3, r1
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006082:	7afb      	ldrb	r3, [r7, #11]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d16e      	bne.n	8006166 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800608e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006096:	2b03      	cmp	r3, #3
 8006098:	f040 8098 	bne.w	80061cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d913      	bls.n	80060d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	4293      	cmp	r3, r2
 80060c0:	bf28      	it	cs
 80060c2:	4613      	movcs	r3, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 f984 	bl	80073d6 <USBD_CtlContinueRx>
 80060ce:	e07d      	b.n	80061cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d014      	beq.n	8006108 <USBD_LL_DataOutStage+0x98>
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d81d      	bhi.n	800611e <USBD_LL_DataOutStage+0xae>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <USBD_LL_DataOutStage+0x7c>
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <USBD_LL_DataOutStage+0x82>
 80060ea:	e018      	b.n	800611e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	75bb      	strb	r3, [r7, #22]
            break;
 80060f0:	e018      	b.n	8006124 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fa5e 	bl	80065be <USBD_CoreFindIF>
 8006102:	4603      	mov	r3, r0
 8006104:	75bb      	strb	r3, [r7, #22]
            break;
 8006106:	e00d      	b.n	8006124 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800610e:	b2db      	uxtb	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fa60 	bl	80065d8 <USBD_CoreFindEP>
 8006118:	4603      	mov	r3, r0
 800611a:	75bb      	strb	r3, [r7, #22]
            break;
 800611c:	e002      	b.n	8006124 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	75bb      	strb	r3, [r7, #22]
            break;
 8006122:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006124:	7dbb      	ldrb	r3, [r7, #22]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d119      	bne.n	800615e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b03      	cmp	r3, #3
 8006134:	d113      	bne.n	800615e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006136:	7dba      	ldrb	r2, [r7, #22]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	32ae      	adds	r2, #174	; 0xae
 800613c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006146:	7dba      	ldrb	r2, [r7, #22]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800614e:	7dba      	ldrb	r2, [r7, #22]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	32ae      	adds	r2, #174	; 0xae
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 f94a 	bl	80073f8 <USBD_CtlSendStatus>
 8006164:	e032      	b.n	80061cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616c:	b2db      	uxtb	r3, r3
 800616e:	4619      	mov	r1, r3
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fa31 	bl	80065d8 <USBD_CoreFindEP>
 8006176:	4603      	mov	r3, r0
 8006178:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800617a:	7dbb      	ldrb	r3, [r7, #22]
 800617c:	2bff      	cmp	r3, #255	; 0xff
 800617e:	d025      	beq.n	80061cc <USBD_LL_DataOutStage+0x15c>
 8006180:	7dbb      	ldrb	r3, [r7, #22]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d122      	bne.n	80061cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d117      	bne.n	80061c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006192:	7dba      	ldrb	r2, [r7, #22]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	32ae      	adds	r2, #174	; 0xae
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00f      	beq.n	80061c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061a2:	7dba      	ldrb	r2, [r7, #22]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061aa:	7dba      	ldrb	r2, [r7, #22]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	32ae      	adds	r2, #174	; 0xae
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	7afa      	ldrb	r2, [r7, #11]
 80061b8:	4611      	mov	r1, r2
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	4798      	blx	r3
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	e000      	b.n	80061ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	460b      	mov	r3, r1
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d16f      	bne.n	80062ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3314      	adds	r3, #20
 80061ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d15a      	bne.n	80062b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	429a      	cmp	r2, r3
 8006204:	d914      	bls.n	8006230 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	461a      	mov	r2, r3
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f001 f8ac 	bl	800737a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006222:	2300      	movs	r3, #0
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f001 fd7d 	bl	8007d28 <USBD_LL_PrepareReceive>
 800622e:	e03f      	b.n	80062b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d11c      	bne.n	8006276 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006244:	429a      	cmp	r2, r3
 8006246:	d316      	bcc.n	8006276 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006252:	429a      	cmp	r2, r3
 8006254:	d20f      	bcs.n	8006276 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006256:	2200      	movs	r2, #0
 8006258:	2100      	movs	r1, #0
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f001 f88d 	bl	800737a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006268:	2300      	movs	r3, #0
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f001 fd5a 	bl	8007d28 <USBD_LL_PrepareReceive>
 8006274:	e01c      	b.n	80062b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d10f      	bne.n	80062a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f001 fc95 	bl	8007bd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f001 f8b7 	bl	800741e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d03a      	beq.n	8006330 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff fe42 	bl	8005f44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062c8:	e032      	b.n	8006330 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f97f 	bl	80065d8 <USBD_CoreFindEP>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2bff      	cmp	r3, #255	; 0xff
 80062e2:	d025      	beq.n	8006330 <USBD_LL_DataInStage+0x15a>
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d122      	bne.n	8006330 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d11c      	bne.n	8006330 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062f6:	7dfa      	ldrb	r2, [r7, #23]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	32ae      	adds	r2, #174	; 0xae
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006306:	7dfa      	ldrb	r2, [r7, #23]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800630e:	7dfa      	ldrb	r2, [r7, #23]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	32ae      	adds	r2, #174	; 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	7afa      	ldrb	r2, [r7, #11]
 800631c:	4611      	mov	r1, r2
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006326:	7dbb      	ldrb	r3, [r7, #22]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800632c:	7dbb      	ldrb	r3, [r7, #22]
 800632e:	e000      	b.n	8006332 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00e      	beq.n	80063a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6852      	ldr	r2, [r2, #4]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	4611      	mov	r1, r2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800639c:	2303      	movs	r3, #3
 800639e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	2200      	movs	r2, #0
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fbcf 	bl	8007b4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2240      	movs	r2, #64	; 0x40
 80063b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	2200      	movs	r2, #0
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fbc1 	bl	8007b4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2240      	movs	r2, #64	; 0x40
 80063d2:	621a      	str	r2, [r3, #32]

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	b2da      	uxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2204      	movs	r2, #4
 8006418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b04      	cmp	r3, #4
 800643c:	d106      	bne.n	800644c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006444:	b2da      	uxtb	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d110      	bne.n	8006490 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	32ae      	adds	r2, #174	; 0xae
 80064b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e01c      	b.n	80064f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d115      	bne.n	80064f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	32ae      	adds	r2, #174	; 0xae
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	32ae      	adds	r2, #174	; 0xae
 80064e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4611      	mov	r1, r2
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	32ae      	adds	r2, #174	; 0xae
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800651c:	2303      	movs	r3, #3
 800651e:	e01c      	b.n	800655a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b03      	cmp	r3, #3
 800652a:	d115      	bne.n	8006558 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	32ae      	adds	r2, #174	; 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	32ae      	adds	r2, #174	; 0xae
 800654a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	4611      	mov	r1, r2
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6852      	ldr	r2, [r2, #4]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	4611      	mov	r1, r2
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	429a      	cmp	r2, r3
 8006618:	d920      	bls.n	800665c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006622:	e013      	b.n	800664c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006624:	f107 030a 	add.w	r3, r7, #10
 8006628:	4619      	mov	r1, r3
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f000 f81b 	bl	8006666 <USBD_GetNextDesc>
 8006630:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	785b      	ldrb	r3, [r3, #1]
 8006636:	2b05      	cmp	r3, #5
 8006638:	d108      	bne.n	800664c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	789b      	ldrb	r3, [r3, #2]
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	429a      	cmp	r2, r3
 8006646:	d008      	beq.n	800665a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	b29a      	uxth	r2, r3
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	429a      	cmp	r2, r3
 8006656:	d8e5      	bhi.n	8006624 <USBD_GetEpDesc+0x32>
 8006658:	e000      	b.n	800665c <USBD_GetEpDesc+0x6a>
          break;
 800665a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800665c:	693b      	ldr	r3, [r7, #16]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	881a      	ldrh	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	4413      	add	r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066be:	8a3b      	ldrh	r3, [r7, #16]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	b21a      	sxth	r2, r3
 80066c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b21b      	sxth	r3, r3
 80066cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066ce:	89fb      	ldrh	r3, [r7, #14]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d005      	beq.n	8006702 <USBD_StdDevReq+0x26>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d857      	bhi.n	80067aa <USBD_StdDevReq+0xce>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00f      	beq.n	800671e <USBD_StdDevReq+0x42>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d153      	bne.n	80067aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	32ae      	adds	r2, #174	; 0xae
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]
      break;
 800671c:	e04a      	b.n	80067b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	2b09      	cmp	r3, #9
 8006724:	d83b      	bhi.n	800679e <USBD_StdDevReq+0xc2>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <USBD_StdDevReq+0x50>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006781 	.word	0x08006781
 8006730:	08006795 	.word	0x08006795
 8006734:	0800679f 	.word	0x0800679f
 8006738:	0800678b 	.word	0x0800678b
 800673c:	0800679f 	.word	0x0800679f
 8006740:	0800675f 	.word	0x0800675f
 8006744:	08006755 	.word	0x08006755
 8006748:	0800679f 	.word	0x0800679f
 800674c:	08006777 	.word	0x08006777
 8006750:	08006769 	.word	0x08006769
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa3c 	bl	8006bd4 <USBD_GetDescriptor>
          break;
 800675c:	e024      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fba1 	bl	8006ea8 <USBD_SetAddress>
          break;
 8006766:	e01f      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fbe0 	bl	8006f30 <USBD_SetConfig>
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
          break;
 8006774:	e018      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fc83 	bl	8007084 <USBD_GetConfig>
          break;
 800677e:	e013      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fcb4 	bl	80070f0 <USBD_GetStatus>
          break;
 8006788:	e00e      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fce3 	bl	8007158 <USBD_SetFeature>
          break;
 8006792:	e009      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fd07 	bl	80071aa <USBD_ClrFeature>
          break;
 800679c:	e004      	b.n	80067a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd5e 	bl	8007262 <USBD_CtlError>
          break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fd58 	bl	8007262 <USBD_CtlError>
      break;
 80067b2:	bf00      	nop
  }

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d005      	beq.n	80067e6 <USBD_StdItfReq+0x26>
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d852      	bhi.n	8006884 <USBD_StdItfReq+0xc4>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <USBD_StdItfReq+0x26>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d14e      	bne.n	8006884 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d840      	bhi.n	8006876 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	889b      	ldrh	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d836      	bhi.n	800686c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	889b      	ldrh	r3, [r3, #4]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fed9 	bl	80065be <USBD_CoreFindIF>
 800680c:	4603      	mov	r3, r0
 800680e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2bff      	cmp	r3, #255	; 0xff
 8006814:	d01d      	beq.n	8006852 <USBD_StdItfReq+0x92>
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11a      	bne.n	8006852 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800681c:	7bba      	ldrb	r2, [r7, #14]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32ae      	adds	r2, #174	; 0xae
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00f      	beq.n	800684c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800682c:	7bba      	ldrb	r2, [r7, #14]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006834:	7bba      	ldrb	r2, [r7, #14]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32ae      	adds	r2, #174	; 0xae
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800684a:	e004      	b.n	8006856 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006850:	e001      	b.n	8006856 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d110      	bne.n	8006880 <USBD_StdItfReq+0xc0>
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10d      	bne.n	8006880 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fdc7 	bl	80073f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800686a:	e009      	b.n	8006880 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fcf7 	bl	8007262 <USBD_CtlError>
          break;
 8006874:	e004      	b.n	8006880 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fcf2 	bl	8007262 <USBD_CtlError>
          break;
 800687e:	e000      	b.n	8006882 <USBD_StdItfReq+0xc2>
          break;
 8006880:	bf00      	nop
      }
      break;
 8006882:	e004      	b.n	800688e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fceb 	bl	8007262 <USBD_CtlError>
      break;
 800688c:	bf00      	nop
  }

  return ret;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	889b      	ldrh	r3, [r3, #4]
 80068aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d007      	beq.n	80068c8 <USBD_StdEPReq+0x30>
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	f200 817f 	bhi.w	8006bbc <USBD_StdEPReq+0x324>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02a      	beq.n	8006918 <USBD_StdEPReq+0x80>
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	f040 817a 	bne.w	8006bbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fe83 	bl	80065d8 <USBD_CoreFindEP>
 80068d2:	4603      	mov	r3, r0
 80068d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068d6:	7b7b      	ldrb	r3, [r7, #13]
 80068d8:	2bff      	cmp	r3, #255	; 0xff
 80068da:	f000 8174 	beq.w	8006bc6 <USBD_StdEPReq+0x32e>
 80068de:	7b7b      	ldrb	r3, [r7, #13]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8170 	bne.w	8006bc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068e6:	7b7a      	ldrb	r2, [r7, #13]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068ee:	7b7a      	ldrb	r2, [r7, #13]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	32ae      	adds	r2, #174	; 0xae
 80068f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8163 	beq.w	8006bc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006900:	7b7a      	ldrb	r2, [r7, #13]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32ae      	adds	r2, #174	; 0xae
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006916:	e156      	b.n	8006bc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d008      	beq.n	8006932 <USBD_StdEPReq+0x9a>
 8006920:	2b03      	cmp	r3, #3
 8006922:	f300 8145 	bgt.w	8006bb0 <USBD_StdEPReq+0x318>
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 809b 	beq.w	8006a62 <USBD_StdEPReq+0x1ca>
 800692c:	2b01      	cmp	r3, #1
 800692e:	d03c      	beq.n	80069aa <USBD_StdEPReq+0x112>
 8006930:	e13e      	b.n	8006bb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d002      	beq.n	8006944 <USBD_StdEPReq+0xac>
 800693e:	2b03      	cmp	r3, #3
 8006940:	d016      	beq.n	8006970 <USBD_StdEPReq+0xd8>
 8006942:	e02c      	b.n	800699e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <USBD_StdEPReq+0xce>
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d00a      	beq.n	8006966 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f93d 	bl	8007bd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f939 	bl	8007bd4 <USBD_LL_StallEP>
 8006962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006964:	e020      	b.n	80069a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc7a 	bl	8007262 <USBD_CtlError>
              break;
 800696e:	e01b      	b.n	80069a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	885b      	ldrh	r3, [r3, #2]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10e      	bne.n	8006996 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <USBD_StdEPReq+0xfe>
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d008      	beq.n	8006996 <USBD_StdEPReq+0xfe>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	88db      	ldrh	r3, [r3, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f91f 	bl	8007bd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fd2e 	bl	80073f8 <USBD_CtlSendStatus>

              break;
 800699c:	e004      	b.n	80069a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc5e 	bl	8007262 <USBD_CtlError>
              break;
 80069a6:	bf00      	nop
          }
          break;
 80069a8:	e107      	b.n	8006bba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d002      	beq.n	80069bc <USBD_StdEPReq+0x124>
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d016      	beq.n	80069e8 <USBD_StdEPReq+0x150>
 80069ba:	e04b      	b.n	8006a54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <USBD_StdEPReq+0x146>
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	d00a      	beq.n	80069de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f901 	bl	8007bd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069d2:	2180      	movs	r1, #128	; 0x80
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 f8fd 	bl	8007bd4 <USBD_LL_StallEP>
 80069da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069dc:	e040      	b.n	8006a60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fc3e 	bl	8007262 <USBD_CtlError>
              break;
 80069e6:	e03b      	b.n	8006a60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	885b      	ldrh	r3, [r3, #2]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d136      	bne.n	8006a5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 f907 	bl	8007c12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fcf7 	bl	80073f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fde2 	bl	80065d8 <USBD_CoreFindEP>
 8006a14:	4603      	mov	r3, r0
 8006a16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a18:	7b7b      	ldrb	r3, [r7, #13]
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	d01f      	beq.n	8006a5e <USBD_StdEPReq+0x1c6>
 8006a1e:	7b7b      	ldrb	r3, [r7, #13]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11c      	bne.n	8006a5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a24:	7b7a      	ldrb	r2, [r7, #13]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a2c:	7b7a      	ldrb	r2, [r7, #13]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	32ae      	adds	r2, #174	; 0xae
 8006a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a3c:	7b7a      	ldrb	r2, [r7, #13]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	32ae      	adds	r2, #174	; 0xae
 8006a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a52:	e004      	b.n	8006a5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc03 	bl	8007262 <USBD_CtlError>
              break;
 8006a5c:	e000      	b.n	8006a60 <USBD_StdEPReq+0x1c8>
              break;
 8006a5e:	bf00      	nop
          }
          break;
 8006a60:	e0ab      	b.n	8006bba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d002      	beq.n	8006a74 <USBD_StdEPReq+0x1dc>
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d032      	beq.n	8006ad8 <USBD_StdEPReq+0x240>
 8006a72:	e097      	b.n	8006ba4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <USBD_StdEPReq+0x1f2>
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d004      	beq.n	8006a8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fbed 	bl	8007262 <USBD_CtlError>
                break;
 8006a88:	e091      	b.n	8006bae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	da0b      	bge.n	8006aaa <USBD_StdEPReq+0x212>
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	e00b      	b.n	8006ac2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2202      	movs	r2, #2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc37 	bl	8007344 <USBD_CtlSendData>
              break;
 8006ad6:	e06a      	b.n	8006bae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da11      	bge.n	8006b04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3324      	adds	r3, #36	; 0x24
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d117      	bne.n	8006b2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbb0 	bl	8007262 <USBD_CtlError>
                  break;
 8006b02:	e054      	b.n	8006bae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fb9d 	bl	8007262 <USBD_CtlError>
                  break;
 8006b28:	e041      	b.n	8006bae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da0b      	bge.n	8006b4a <USBD_StdEPReq+0x2b2>
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	3310      	adds	r3, #16
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	3304      	adds	r3, #4
 8006b48:	e00b      	b.n	8006b62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	3304      	adds	r3, #4
 8006b62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <USBD_StdEPReq+0x2d8>
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d103      	bne.n	8006b78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e00e      	b.n	8006b96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f867 	bl	8007c50 <USBD_LL_IsStallEP>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fbd1 	bl	8007344 <USBD_CtlSendData>
              break;
 8006ba2:	e004      	b.n	8006bae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fb5b 	bl	8007262 <USBD_CtlError>
              break;
 8006bac:	bf00      	nop
          }
          break;
 8006bae:	e004      	b.n	8006bba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb55 	bl	8007262 <USBD_CtlError>
          break;
 8006bb8:	bf00      	nop
      }
      break;
 8006bba:	e005      	b.n	8006bc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fb4f 	bl	8007262 <USBD_CtlError>
      break;
 8006bc4:	e000      	b.n	8006bc8 <USBD_StdEPReq+0x330>
      break;
 8006bc6:	bf00      	nop
  }

  return ret;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	f200 8128 	bhi.w	8006e4a <USBD_GetDescriptor+0x276>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <USBD_GetDescriptor+0x2c>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c1d 	.word	0x08006c1d
 8006c04:	08006c35 	.word	0x08006c35
 8006c08:	08006c75 	.word	0x08006c75
 8006c0c:	08006e4b 	.word	0x08006e4b
 8006c10:	08006e4b 	.word	0x08006e4b
 8006c14:	08006deb 	.word	0x08006deb
 8006c18:	08006e17 	.word	0x08006e17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7c12      	ldrb	r2, [r2, #16]
 8006c28:	f107 0108 	add.w	r1, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
      break;
 8006c32:	e112      	b.n	8006e5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7c1b      	ldrb	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c44:	f107 0208 	add.w	r2, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	2202      	movs	r2, #2
 8006c54:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c56:	e100      	b.n	8006e5a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	f107 0208 	add.w	r2, r7, #8
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
 8006c68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	2202      	movs	r2, #2
 8006c70:	701a      	strb	r2, [r3, #0]
      break;
 8006c72:	e0f2      	b.n	8006e5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	885b      	ldrh	r3, [r3, #2]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	f200 80ac 	bhi.w	8006dd8 <USBD_GetDescriptor+0x204>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <USBD_GetDescriptor+0xb4>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006ca1 	.word	0x08006ca1
 8006c8c:	08006cd5 	.word	0x08006cd5
 8006c90:	08006d09 	.word	0x08006d09
 8006c94:	08006d3d 	.word	0x08006d3d
 8006c98:	08006d71 	.word	0x08006d71
 8006c9c:	08006da5 	.word	0x08006da5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e091      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 facb 	bl	8007262 <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e089      	b.n	8006de8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf6:	e077      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fab1 	bl	8007262 <USBD_CtlError>
            err++;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	3301      	adds	r3, #1
 8006d04:	72fb      	strb	r3, [r7, #11]
          break;
 8006d06:	e06f      	b.n	8006de8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2a:	e05d      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa97 	bl	8007262 <USBD_CtlError>
            err++;
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	3301      	adds	r3, #1
 8006d38:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3a:	e055      	b.n	8006de8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e043      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa7d 	bl	8007262 <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e03b      	b.n	8006de8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e029      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa63 	bl	8007262 <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e021      	b.n	8006de8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc6:	e00f      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa49 	bl	8007262 <USBD_CtlError>
            err++;
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd6:	e007      	b.n	8006de8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa41 	bl	8007262 <USBD_CtlError>
          err++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	3301      	adds	r3, #1
 8006de4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006de6:	bf00      	nop
      }
      break;
 8006de8:	e037      	b.n	8006e5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7c1b      	ldrb	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e04:	e029      	b.n	8006e5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa2a 	bl	8007262 <USBD_CtlError>
        err++;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	3301      	adds	r3, #1
 8006e12:	72fb      	strb	r3, [r7, #11]
      break;
 8006e14:	e021      	b.n	8006e5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1b      	ldrb	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	f107 0208 	add.w	r2, r7, #8
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4798      	blx	r3
 8006e2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	2207      	movs	r2, #7
 8006e36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e38:	e00f      	b.n	8006e5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa10 	bl	8007262 <USBD_CtlError>
        err++;
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	3301      	adds	r3, #1
 8006e46:	72fb      	strb	r3, [r7, #11]
      break;
 8006e48:	e007      	b.n	8006e5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fa08 	bl	8007262 <USBD_CtlError>
      err++;
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	3301      	adds	r3, #1
 8006e56:	72fb      	strb	r3, [r7, #11]
      break;
 8006e58:	bf00      	nop
  }

  if (err != 0U)
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d11e      	bne.n	8006e9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	88db      	ldrh	r3, [r3, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d016      	beq.n	8006e96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e68:	893b      	ldrh	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88da      	ldrh	r2, [r3, #6]
 8006e72:	893b      	ldrh	r3, [r7, #8]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	bf28      	it	cs
 8006e78:	4613      	movcs	r3, r2
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e7e:	893b      	ldrh	r3, [r7, #8]
 8006e80:	461a      	mov	r2, r3
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa5d 	bl	8007344 <USBD_CtlSendData>
 8006e8a:	e009      	b.n	8006ea0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9e7 	bl	8007262 <USBD_CtlError>
 8006e94:	e004      	b.n	8006ea0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 faae 	bl	80073f8 <USBD_CtlSendStatus>
 8006e9c:	e000      	b.n	8006ea0 <USBD_GetDescriptor+0x2cc>
    return;
 8006e9e:	bf00      	nop
  }
}
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	889b      	ldrh	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d131      	bne.n	8006f1e <USBD_SetAddress+0x76>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d12d      	bne.n	8006f1e <USBD_SetAddress+0x76>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	885b      	ldrh	r3, [r3, #2]
 8006ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec8:	d829      	bhi.n	8006f1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d104      	bne.n	8006eec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9bc 	bl	8007262 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	e01d      	b.n	8006f28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	7bfa      	ldrb	r2, [r7, #15]
 8006ef0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fed5 	bl	8007ca8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa7a 	bl	80073f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	e009      	b.n	8006f28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	e004      	b.n	8006f28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f99e 	bl	8007262 <USBD_CtlError>
  }
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	4b4e      	ldr	r3, [pc, #312]	; (8007080 <USBD_SetConfig+0x150>)
 8006f46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f48:	4b4d      	ldr	r3, [pc, #308]	; (8007080 <USBD_SetConfig+0x150>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d905      	bls.n	8006f5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f985 	bl	8007262 <USBD_CtlError>
    return USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e08c      	b.n	8007076 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d002      	beq.n	8006f6e <USBD_SetConfig+0x3e>
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d029      	beq.n	8006fc0 <USBD_SetConfig+0x90>
 8006f6c:	e075      	b.n	800705a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f6e:	4b44      	ldr	r3, [pc, #272]	; (8007080 <USBD_SetConfig+0x150>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d020      	beq.n	8006fb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f76:	4b42      	ldr	r3, [pc, #264]	; (8007080 <USBD_SetConfig+0x150>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f80:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <USBD_SetConfig+0x150>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fe ffe7 	bl	8005f5a <USBD_SetClassConfig>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f962 	bl	8007262 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fa6:	e065      	b.n	8007074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa25 	bl	80073f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fb6:	e05d      	b.n	8007074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa1d 	bl	80073f8 <USBD_CtlSendStatus>
      break;
 8006fbe:	e059      	b.n	8007074 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fc0:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <USBD_SetConfig+0x150>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d112      	bne.n	8006fee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006fd0:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <USBD_SetConfig+0x150>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <USBD_SetConfig+0x150>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fe ffd6 	bl	8005f92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa06 	bl	80073f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fec:	e042      	b.n	8007074 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fee:	4b24      	ldr	r3, [pc, #144]	; (8007080 <USBD_SetConfig+0x150>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d02a      	beq.n	8007052 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fe ffc4 	bl	8005f92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <USBD_SetConfig+0x150>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007014:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <USBD_SetConfig+0x150>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe ff9d 	bl	8005f5a <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00f      	beq.n	800704a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f918 	bl	8007262 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fe ffa9 	bl	8005f92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007048:	e014      	b.n	8007074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f9d4 	bl	80073f8 <USBD_CtlSendStatus>
      break;
 8007050:	e010      	b.n	8007074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f9d0 	bl	80073f8 <USBD_CtlSendStatus>
      break;
 8007058:	e00c      	b.n	8007074 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f900 	bl	8007262 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <USBD_SetConfig+0x150>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7fe ff92 	bl	8005f92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	73fb      	strb	r3, [r7, #15]
      break;
 8007072:	bf00      	nop
  }

  return ret;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200001b8 	.word	0x200001b8

08007084 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	88db      	ldrh	r3, [r3, #6]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d004      	beq.n	80070a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8e2 	bl	8007262 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800709e:	e023      	b.n	80070e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	dc02      	bgt.n	80070b2 <USBD_GetConfig+0x2e>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dc03      	bgt.n	80070b8 <USBD_GetConfig+0x34>
 80070b0:	e015      	b.n	80070de <USBD_GetConfig+0x5a>
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d00b      	beq.n	80070ce <USBD_GetConfig+0x4a>
 80070b6:	e012      	b.n	80070de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3308      	adds	r3, #8
 80070c2:	2201      	movs	r2, #1
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f93c 	bl	8007344 <USBD_CtlSendData>
        break;
 80070cc:	e00c      	b.n	80070e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2201      	movs	r2, #1
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f934 	bl	8007344 <USBD_CtlSendData>
        break;
 80070dc:	e004      	b.n	80070e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8be 	bl	8007262 <USBD_CtlError>
        break;
 80070e6:	bf00      	nop
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007100:	b2db      	uxtb	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	2b02      	cmp	r3, #2
 8007106:	d81e      	bhi.n	8007146 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d004      	beq.n	800711a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8a5 	bl	8007262 <USBD_CtlError>
        break;
 8007118:	e01a      	b.n	8007150 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f043 0202 	orr.w	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	330c      	adds	r3, #12
 800713a:	2202      	movs	r2, #2
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f900 	bl	8007344 <USBD_CtlSendData>
      break;
 8007144:	e004      	b.n	8007150 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f88a 	bl	8007262 <USBD_CtlError>
      break;
 800714e:	bf00      	nop
  }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d107      	bne.n	800717a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f940 	bl	80073f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007178:	e013      	b.n	80071a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d10b      	bne.n	800719a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	889b      	ldrh	r3, [r3, #4]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b29b      	uxth	r3, r3
 800718a:	b2da      	uxtb	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f930 	bl	80073f8 <USBD_CtlSendStatus>
}
 8007198:	e003      	b.n	80071a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f860 	bl	8007262 <USBD_CtlError>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d80b      	bhi.n	80071da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	885b      	ldrh	r3, [r3, #2]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d10c      	bne.n	80071e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f910 	bl	80073f8 <USBD_CtlSendStatus>
      }
      break;
 80071d8:	e004      	b.n	80071e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f840 	bl	8007262 <USBD_CtlError>
      break;
 80071e2:	e000      	b.n	80071e6 <USBD_ClrFeature+0x3c>
      break;
 80071e4:	bf00      	nop
  }
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fa41 	bl	80066a0 <SWAPBYTE>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff fa34 	bl	80066a0 <SWAPBYTE>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fa27 	bl	80066a0 <SWAPBYTE>
 8007252:	4603      	mov	r3, r0
 8007254:	461a      	mov	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	80da      	strh	r2, [r3, #6]
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800726c:	2180      	movs	r1, #128	; 0x80
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fcb0 	bl	8007bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007274:	2100      	movs	r1, #0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fcac 	bl	8007bd4 <USBD_LL_StallEP>
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d036      	beq.n	8007308 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800729e:	6938      	ldr	r0, [r7, #16]
 80072a0:	f000 f836 	bl	8007310 <USBD_GetLen>
 80072a4:	4603      	mov	r3, r0
 80072a6:	3301      	adds	r3, #1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4413      	add	r3, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	3301      	adds	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4413      	add	r3, r2
 80072ca:	2203      	movs	r2, #3
 80072cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	3301      	adds	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072d4:	e013      	b.n	80072fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	4413      	add	r3, r2
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3301      	adds	r3, #1
 80072e6:	613b      	str	r3, [r7, #16]
    idx++;
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	3301      	adds	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	3301      	adds	r3, #1
 80072fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e7      	bne.n	80072d6 <USBD_GetString+0x52>
 8007306:	e000      	b.n	800730a <USBD_GetString+0x86>
    return;
 8007308:	bf00      	nop
  }
}
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007320:	e005      	b.n	800732e <USBD_GetLen+0x1e>
  {
    len++;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	3301      	adds	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3301      	adds	r3, #1
 800732c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f5      	bne.n	8007322 <USBD_GetLen+0x12>
  }

  return len;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2202      	movs	r2, #2
 8007354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fcbb 	bl	8007ce6 <USBD_LL_Transmit>

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fcaa 	bl	8007ce6 <USBD_LL_Transmit>

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2203      	movs	r2, #3
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	2100      	movs	r1, #0
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fcae 	bl	8007d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	2100      	movs	r1, #0
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fc9d 	bl	8007d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2204      	movs	r2, #4
 8007404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc69 	bl	8007ce6 <USBD_LL_Transmit>

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2205      	movs	r2, #5
 800742a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742e:	2300      	movs	r3, #0
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc77 	bl	8007d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007448:	2200      	movs	r2, #0
 800744a:	4912      	ldr	r1, [pc, #72]	; (8007494 <MX_USB_DEVICE_Init+0x50>)
 800744c:	4812      	ldr	r0, [pc, #72]	; (8007498 <MX_USB_DEVICE_Init+0x54>)
 800744e:	f7fe fd07 	bl	8005e60 <USBD_Init>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007458:	f7f9 f9be 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800745c:	490f      	ldr	r1, [pc, #60]	; (800749c <MX_USB_DEVICE_Init+0x58>)
 800745e:	480e      	ldr	r0, [pc, #56]	; (8007498 <MX_USB_DEVICE_Init+0x54>)
 8007460:	f7fe fd2e 	bl	8005ec0 <USBD_RegisterClass>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800746a:	f7f9 f9b5 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800746e:	490c      	ldr	r1, [pc, #48]	; (80074a0 <MX_USB_DEVICE_Init+0x5c>)
 8007470:	4809      	ldr	r0, [pc, #36]	; (8007498 <MX_USB_DEVICE_Init+0x54>)
 8007472:	f7fe fc65 	bl	8005d40 <USBD_CDC_RegisterInterface>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800747c:	f7f9 f9ac 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <MX_USB_DEVICE_Init+0x54>)
 8007482:	f7fe fd53 	bl	8005f2c <USBD_Start>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800748c:	f7f9 f9a4 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	200000ac 	.word	0x200000ac
 8007498:	200001bc 	.word	0x200001bc
 800749c:	20000018 	.word	0x20000018
 80074a0:	20000098 	.word	0x20000098

080074a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074a8:	2200      	movs	r2, #0
 80074aa:	4905      	ldr	r1, [pc, #20]	; (80074c0 <CDC_Init_FS+0x1c>)
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <CDC_Init_FS+0x20>)
 80074ae:	f7fe fc61 	bl	8005d74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074b2:	4905      	ldr	r1, [pc, #20]	; (80074c8 <CDC_Init_FS+0x24>)
 80074b4:	4803      	ldr	r0, [pc, #12]	; (80074c4 <CDC_Init_FS+0x20>)
 80074b6:	f7fe fc7f 	bl	8005db8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000c98 	.word	0x20000c98
 80074c4:	200001bc 	.word	0x200001bc
 80074c8:	20000498 	.word	0x20000498

080074cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
 80074e8:	4613      	mov	r3, r2
 80074ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b23      	cmp	r3, #35	; 0x23
 80074f0:	d84a      	bhi.n	8007588 <CDC_Control_FS+0xac>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <CDC_Control_FS+0x1c>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007589 	.word	0x08007589
 80074fc:	08007589 	.word	0x08007589
 8007500:	08007589 	.word	0x08007589
 8007504:	08007589 	.word	0x08007589
 8007508:	08007589 	.word	0x08007589
 800750c:	08007589 	.word	0x08007589
 8007510:	08007589 	.word	0x08007589
 8007514:	08007589 	.word	0x08007589
 8007518:	08007589 	.word	0x08007589
 800751c:	08007589 	.word	0x08007589
 8007520:	08007589 	.word	0x08007589
 8007524:	08007589 	.word	0x08007589
 8007528:	08007589 	.word	0x08007589
 800752c:	08007589 	.word	0x08007589
 8007530:	08007589 	.word	0x08007589
 8007534:	08007589 	.word	0x08007589
 8007538:	08007589 	.word	0x08007589
 800753c:	08007589 	.word	0x08007589
 8007540:	08007589 	.word	0x08007589
 8007544:	08007589 	.word	0x08007589
 8007548:	08007589 	.word	0x08007589
 800754c:	08007589 	.word	0x08007589
 8007550:	08007589 	.word	0x08007589
 8007554:	08007589 	.word	0x08007589
 8007558:	08007589 	.word	0x08007589
 800755c:	08007589 	.word	0x08007589
 8007560:	08007589 	.word	0x08007589
 8007564:	08007589 	.word	0x08007589
 8007568:	08007589 	.word	0x08007589
 800756c:	08007589 	.word	0x08007589
 8007570:	08007589 	.word	0x08007589
 8007574:	08007589 	.word	0x08007589
 8007578:	08007589 	.word	0x08007589
 800757c:	08007589 	.word	0x08007589
 8007580:	08007589 	.word	0x08007589
 8007584:	08007589 	.word	0x08007589
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007588:	bf00      	nop
  }

  return (USBD_OK);
 800758a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4805      	ldr	r0, [pc, #20]	; (80075bc <CDC_Receive_FS+0x24>)
 80075a6:	f7fe fc07 	bl	8005db8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075aa:	4804      	ldr	r0, [pc, #16]	; (80075bc <CDC_Receive_FS+0x24>)
 80075ac:	f7fe fc22 	bl	8005df4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200001bc 	.word	0x200001bc

080075c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4613      	mov	r3, r2
 80075cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2212      	movs	r2, #18
 80075f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075f6:	4b03      	ldr	r3, [pc, #12]	; (8007604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200000c8 	.word	0x200000c8

08007608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	6039      	str	r1, [r7, #0]
 8007612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2204      	movs	r2, #4
 8007618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800761a:	4b03      	ldr	r3, [pc, #12]	; (8007628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	200000dc 	.word	0x200000dc

0800762c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	6039      	str	r1, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d105      	bne.n	800764a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4907      	ldr	r1, [pc, #28]	; (8007660 <USBD_FS_ProductStrDescriptor+0x34>)
 8007642:	4808      	ldr	r0, [pc, #32]	; (8007664 <USBD_FS_ProductStrDescriptor+0x38>)
 8007644:	f7ff fe1e 	bl	8007284 <USBD_GetString>
 8007648:	e004      	b.n	8007654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4904      	ldr	r1, [pc, #16]	; (8007660 <USBD_FS_ProductStrDescriptor+0x34>)
 800764e:	4805      	ldr	r0, [pc, #20]	; (8007664 <USBD_FS_ProductStrDescriptor+0x38>)
 8007650:	f7ff fe18 	bl	8007284 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20001498 	.word	0x20001498
 8007664:	08007e88 	.word	0x08007e88

08007668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	4904      	ldr	r1, [pc, #16]	; (8007688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007678:	4804      	ldr	r0, [pc, #16]	; (800768c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800767a:	f7ff fe03 	bl	8007284 <USBD_GetString>
  return USBD_StrDesc;
 800767e:	4b02      	ldr	r3, [pc, #8]	; (8007688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20001498 	.word	0x20001498
 800768c:	08007ea0 	.word	0x08007ea0

08007690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	221a      	movs	r2, #26
 80076a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076a2:	f000 f843 	bl	800772c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076a6:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200000e0 	.word	0x200000e0

080076b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4907      	ldr	r1, [pc, #28]	; (80076e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ca:	4808      	ldr	r0, [pc, #32]	; (80076ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80076cc:	f7ff fdda 	bl	8007284 <USBD_GetString>
 80076d0:	e004      	b.n	80076dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4904      	ldr	r1, [pc, #16]	; (80076e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076d6:	4805      	ldr	r0, [pc, #20]	; (80076ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80076d8:	f7ff fdd4 	bl	8007284 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076dc:	4b02      	ldr	r3, [pc, #8]	; (80076e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20001498 	.word	0x20001498
 80076ec:	08007eb4 	.word	0x08007eb4

080076f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d105      	bne.n	800770e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4907      	ldr	r1, [pc, #28]	; (8007724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007706:	4808      	ldr	r0, [pc, #32]	; (8007728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007708:	f7ff fdbc 	bl	8007284 <USBD_GetString>
 800770c:	e004      	b.n	8007718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4904      	ldr	r1, [pc, #16]	; (8007724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007712:	4805      	ldr	r0, [pc, #20]	; (8007728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007714:	f7ff fdb6 	bl	8007284 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20001498 	.word	0x20001498
 8007728:	08007ec0 	.word	0x08007ec0

0800772c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007732:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <Get_SerialNum+0x44>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <Get_SerialNum+0x48>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800773e:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <Get_SerialNum+0x4c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007752:	2208      	movs	r2, #8
 8007754:	4909      	ldr	r1, [pc, #36]	; (800777c <Get_SerialNum+0x50>)
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f814 	bl	8007784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800775c:	2204      	movs	r2, #4
 800775e:	4908      	ldr	r1, [pc, #32]	; (8007780 <Get_SerialNum+0x54>)
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f000 f80f 	bl	8007784 <IntToUnicode>
  }
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	1fff7a10 	.word	0x1fff7a10
 8007774:	1fff7a14 	.word	0x1fff7a14
 8007778:	1fff7a18 	.word	0x1fff7a18
 800777c:	200000e2 	.word	0x200000e2
 8007780:	200000f2 	.word	0x200000f2

08007784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]
 800779a:	e027      	b.n	80077ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	0f1b      	lsrs	r3, r3, #28
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	d80b      	bhi.n	80077bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	0f1b      	lsrs	r3, r3, #28
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4619      	mov	r1, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	440b      	add	r3, r1
 80077b4:	3230      	adds	r2, #48	; 0x30
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	e00a      	b.n	80077d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	0f1b      	lsrs	r3, r3, #28
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	4619      	mov	r1, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	440b      	add	r3, r1
 80077cc:	3237      	adds	r2, #55	; 0x37
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	3301      	adds	r3, #1
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	4413      	add	r3, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	3301      	adds	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
 80077ec:	7dfa      	ldrb	r2, [r7, #23]
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d3d3      	bcc.n	800779c <IntToUnicode+0x18>
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800780c:	f107 0314 	add.w	r3, r7, #20
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007824:	d13a      	bne.n	800789c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007826:	2300      	movs	r3, #0
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	6313      	str	r3, [r2, #48]	; 0x30
 8007836:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007848:	2302      	movs	r3, #2
 800784a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007850:	2303      	movs	r3, #3
 8007852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007854:	230a      	movs	r3, #10
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007858:	f107 0314 	add.w	r3, r7, #20
 800785c:	4619      	mov	r1, r3
 800785e:	4812      	ldr	r0, [pc, #72]	; (80078a8 <HAL_PCD_MspInit+0xa4>)
 8007860:	f7f9 fa90 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007864:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 8007866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007868:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 800786a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786e:	6353      	str	r3, [r2, #52]	; 0x34
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 8007876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007878:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 800787a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800787e:	6453      	str	r3, [r2, #68]	; 0x44
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <HAL_PCD_MspInit+0xa0>)
 8007882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	2043      	movs	r0, #67	; 0x43
 8007892:	f7f9 fa40 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007896:	2043      	movs	r0, #67	; 0x43
 8007898:	f7f9 fa59 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800789c:	bf00      	nop
 800789e:	3728      	adds	r7, #40	; 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40023800 	.word	0x40023800
 80078a8:	40020000 	.word	0x40020000

080078ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7fe fb7f 	bl	8005fc6 <USBD_LL_SetupStage>
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	4619      	mov	r1, r3
 80078fa:	f7fe fbb9 	bl	8006070 <USBD_LL_DataOutStage>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	334c      	adds	r3, #76	; 0x4c
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	4619      	mov	r1, r3
 800792e:	f7fe fc52 	bl	80061d6 <USBD_LL_DataInStage>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fd86 	bl	800645a <USBD_LL_SOF>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800795e:	2301      	movs	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d001      	beq.n	800796e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800796a:	f7f8 ff35 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007974:	7bfa      	ldrb	r2, [r7, #15]
 8007976:	4611      	mov	r1, r2
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fd30 	bl	80063de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fcd8 	bl	800633a <USBD_LL_Reset>
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fd2b 	bl	80063fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <HAL_PCD_SuspendCallback+0x48>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	4a03      	ldr	r2, [pc, #12]	; (80079dc <HAL_PCD_SuspendCallback+0x48>)
 80079ce:	f043 0306 	orr.w	r3, r3, #6
 80079d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	e000ed00 	.word	0xe000ed00

080079e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fd1b 	bl	800642a <USBD_LL_Resume>
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fd73 	bl	80064fe <USBD_LL_IsoOUTIncomplete>
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fd2f 	bl	800649a <USBD_LL_IsoINIncomplete>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fd85 	bl	8006562 <USBD_LL_DevConnected>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fd82 	bl	8006578 <USBD_LL_DevDisconnected>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d13c      	bne.n	8007b06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a8c:	4a20      	ldr	r2, [pc, #128]	; (8007b10 <USBD_LL_Init+0x94>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <USBD_LL_Init+0x94>)
 8007a98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a9c:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <USBD_LL_Init+0x94>)
 8007a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <USBD_LL_Init+0x94>)
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aaa:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <USBD_LL_Init+0x94>)
 8007aac:	2202      	movs	r2, #2
 8007aae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <USBD_LL_Init+0x94>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <USBD_LL_Init+0x94>)
 8007ab8:	2202      	movs	r2, #2
 8007aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007abc:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <USBD_LL_Init+0x94>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <USBD_LL_Init+0x94>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <USBD_LL_Init+0x94>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ace:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <USBD_LL_Init+0x94>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <USBD_LL_Init+0x94>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ada:	480d      	ldr	r0, [pc, #52]	; (8007b10 <USBD_LL_Init+0x94>)
 8007adc:	f7f9 fc34 	bl	8001348 <HAL_PCD_Init>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ae6:	f7f8 fe77 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007aea:	2180      	movs	r1, #128	; 0x80
 8007aec:	4808      	ldr	r0, [pc, #32]	; (8007b10 <USBD_LL_Init+0x94>)
 8007aee:	f7fa fe8c 	bl	800280a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007af2:	2240      	movs	r2, #64	; 0x40
 8007af4:	2100      	movs	r1, #0
 8007af6:	4806      	ldr	r0, [pc, #24]	; (8007b10 <USBD_LL_Init+0x94>)
 8007af8:	f7fa fe40 	bl	800277c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	2101      	movs	r1, #1
 8007b00:	4803      	ldr	r0, [pc, #12]	; (8007b10 <USBD_LL_Init+0x94>)
 8007b02:	f7fa fe3b 	bl	800277c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20001698 	.word	0x20001698

08007b14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7f9 fd29 	bl	8001582 <HAL_PCD_Start>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f942 	bl	8007dc0 <USBD_Get_USB_Status>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	461a      	mov	r2, r3
 8007b58:	4603      	mov	r3, r0
 8007b5a:	70fb      	strb	r3, [r7, #3]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70bb      	strb	r3, [r7, #2]
 8007b60:	4613      	mov	r3, r2
 8007b62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b72:	78bb      	ldrb	r3, [r7, #2]
 8007b74:	883a      	ldrh	r2, [r7, #0]
 8007b76:	78f9      	ldrb	r1, [r7, #3]
 8007b78:	f7fa f9fa 	bl	8001f70 <HAL_PCD_EP_Open>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f91c 	bl	8007dc0 <USBD_Get_USB_Status>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fa fa43 	bl	8002040 <HAL_PCD_EP_Close>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8fd 	bl	8007dc0 <USBD_Get_USB_Status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa fb1b 	bl	800222e <HAL_PCD_EP_SetStall>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f8de 	bl	8007dc0 <USBD_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fa fb60 	bl	80022f6 <HAL_PCD_EP_ClrStall>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f8bf 	bl	8007dc0 <USBD_Get_USB_Status>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0b      	bge.n	8007c84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	333e      	adds	r3, #62	; 0x3e
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	e00b      	b.n	8007c9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fa f92d 	bl	8001f26 <HAL_PCD_SetAddress>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f874 	bl	8007dc0 <USBD_Get_USB_Status>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d04:	7af9      	ldrb	r1, [r7, #11]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f7fa fa46 	bl	800219a <HAL_PCD_EP_Transmit>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f853 	bl	8007dc0 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	460b      	mov	r3, r1
 8007d36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d46:	7af9      	ldrb	r1, [r7, #11]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	f7fa f9c2 	bl	80020d4 <HAL_PCD_EP_Receive>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f832 	bl	8007dc0 <USBD_Get_USB_Status>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fa f9f2 	bl	800216a <HAL_PCD_EP_GetRxCount>
 8007d86:	4603      	mov	r3, r0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d98:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <USBD_static_malloc+0x18>)
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20001ba4 	.word	0x20001ba4

08007dac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]

}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d817      	bhi.n	8007e04 <USBD_Get_USB_Status+0x44>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USBD_Get_USB_Status+0x1c>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007df3 	.word	0x08007df3
 8007de4:	08007df9 	.word	0x08007df9
 8007de8:	08007dff 	.word	0x08007dff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
    break;
 8007df0:	e00b      	b.n	8007e0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007df2:	2303      	movs	r3, #3
 8007df4:	73fb      	strb	r3, [r7, #15]
    break;
 8007df6:	e008      	b.n	8007e0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfc:	e005      	b.n	8007e0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	73fb      	strb	r3, [r7, #15]
    break;
 8007e02:	e002      	b.n	8007e0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
    break;
 8007e08:	bf00      	nop
  }
  return usb_status;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <__libc_init_array>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4d0d      	ldr	r5, [pc, #52]	; (8007e60 <__libc_init_array+0x38>)
 8007e2c:	4c0d      	ldr	r4, [pc, #52]	; (8007e64 <__libc_init_array+0x3c>)
 8007e2e:	1b64      	subs	r4, r4, r5
 8007e30:	10a4      	asrs	r4, r4, #2
 8007e32:	2600      	movs	r6, #0
 8007e34:	42a6      	cmp	r6, r4
 8007e36:	d109      	bne.n	8007e4c <__libc_init_array+0x24>
 8007e38:	4d0b      	ldr	r5, [pc, #44]	; (8007e68 <__libc_init_array+0x40>)
 8007e3a:	4c0c      	ldr	r4, [pc, #48]	; (8007e6c <__libc_init_array+0x44>)
 8007e3c:	f000 f818 	bl	8007e70 <_init>
 8007e40:	1b64      	subs	r4, r4, r5
 8007e42:	10a4      	asrs	r4, r4, #2
 8007e44:	2600      	movs	r6, #0
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	d105      	bne.n	8007e56 <__libc_init_array+0x2e>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e50:	4798      	blx	r3
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7ee      	b.n	8007e34 <__libc_init_array+0xc>
 8007e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5a:	4798      	blx	r3
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	e7f2      	b.n	8007e46 <__libc_init_array+0x1e>
 8007e60:	08007ef0 	.word	0x08007ef0
 8007e64:	08007ef0 	.word	0x08007ef0
 8007e68:	08007ef0 	.word	0x08007ef0
 8007e6c:	08007ef4 	.word	0x08007ef4

08007e70 <_init>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr

08007e7c <_fini>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr
